{"file_contents":{"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/RecommendedServices.tsx":{"content":"import ServiceCard from \"./ServiceCard\";\nimport { MOCK_SERVICES } from \"@/lib/mockData\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useApp } from \"@/context/AppContext\";\n\ninterface RecommendedServicesProps {\n  currentServiceId: string;\n  category: string;\n  onServiceClick: (serviceId: string) => void;\n}\n\nexport default function RecommendedServices({\n  currentServiceId,\n  category,\n  onServiceClick,\n}: RecommendedServicesProps) {\n  const [, setLocation] = useLocation();\n  const { setSelectedCategory } = useApp();\n\n  //todo: remove mock functionality - implement real recommendation algorithm\n  const recommendedServices = MOCK_SERVICES\n    .filter(service => \n      service.id !== currentServiceId && service.category === category\n    )\n    .slice(0, 3);\n\n  if (recommendedServices.length === 0) {\n    return null;\n  }\n\n  const handleViewAllSimilar = () => {\n    setSelectedCategory(category);\n    setLocation('/');\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold\">Similar Services</h2>\n        <Button \n          variant=\"outline\" \n          onClick={handleViewAllSimilar}\n          className=\"gap-2\"\n          data-testid=\"button-find-similar\"\n        >\n          View All {category.charAt(0).toUpperCase() + category.slice(1)}\n          <ArrowRight className=\"h-4 w-4\" />\n        </Button>\n      </div>\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {recommendedServices.map(service => (\n          <ServiceCard\n            key={service.id}\n            id={service.id}\n            name={service.name}\n            subtitle={service.subtitle}\n            description={service.description}\n            price={service.price}\n            rating={service.rating}\n            icon={service.icon}\n            color={service.color}\n            logoUrl={service.logoUrl}\n            onClick={() => onServiceClick(service.id)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2102},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/SortSelect.tsx":{"content":"import {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ArrowUpDown } from \"lucide-react\";\n\nexport type SortOption = 'rating-desc' | 'rating-asc' | 'popularity' | 'newest' | 'price-asc' | 'price-desc';\n\ninterface SortSelectProps {\n  value: SortOption;\n  onChange: (value: SortOption) => void;\n}\n\nexport default function SortSelect({ value, onChange }: SortSelectProps) {\n  return (\n    <div className=\"flex items-center gap-2\">\n      <ArrowUpDown className=\"h-4 w-4 text-muted-foreground\" />\n      <Select value={value} onValueChange={onChange}>\n        <SelectTrigger className=\"w-[200px]\" data-testid=\"select-sort\">\n          <SelectValue placeholder=\"Sort by\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"rating-desc\">Highest Rated</SelectItem>\n          <SelectItem value=\"rating-asc\">Lowest Rated</SelectItem>\n          <SelectItem value=\"popularity\">Most Popular</SelectItem>\n          <SelectItem value=\"newest\">Newest First</SelectItem>\n          <SelectItem value=\"price-asc\">Price: Low to High</SelectItem>\n          <SelectItem value=\"price-desc\">Price: High to Low</SelectItem>\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n","size_bytes":1253},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/lib/mockData.ts":{"content":"//todo: remove mock functionality - replace with real API data\nexport const MOCK_SERVICES = [\n  {\n    id: \"1\",\n    name: \"Jasper AI\",\n    subtitle: \"AI Copywriting\",\n    description: \"Content creation for marketing, blogs, and social media\",\n    fullDescription: \"Jasper AI is an advanced AI writing assistant that helps create high-quality content for blogs, marketing campaigns, social media posts, and more. With over 50+ templates and support for 25+ languages, Jasper streamlines your content creation process.\",\n    category: \"copywriting\",\n    price: \"Freemium\",\n    rating: \"4.8\",\n    icon: \"✨\",\n    color: \"#6366f1\",\n    logoUrl: \"https://www.jasper.ai/favicon.ico\",\n    features: [\n      \"50+ AI templates\",\n      \"SEO mode for optimized content\",\n      \"Multi-language support (25+ languages)\",\n      \"Plagiarism checker\",\n      \"Team collaboration tools\",\n      \"Chrome extension\"\n    ],\n    pricingTiers: [\n      { name: \"Free\", price: \"$0\", features: [\"10,000 words/month\", \"Basic templates\", \"1 user\"] },\n      { name: \"Starter\", price: \"$49/mo\", features: [\"100,000 words/month\", \"All templates\", \"SEO mode\", \"1 user\"] },\n      { name: \"Boss Mode\", price: \"$99/mo\", features: [\"Unlimited words\", \"All features\", \"Priority support\", \"3 users\"] }\n    ],\n    useCases: [\"Blog writing\", \"Ad copy\", \"Product descriptions\", \"Social media content\", \"Email marketing\"],\n    website: \"https://jasper.ai\",\n    popularity: 9500,\n    createdAt: new Date('2025-08-15'),\n    teamSize: [\"individual\", \"small\", \"medium\"],\n    hasFreeTier: true,\n    popularFeatures: [\"Browser Extension\", \"Team Collaboration\", \"Multi-language\", \"SEO Tools\"],\n    commonUseCases: [\"Content Marketing\", \"SEO\", \"Social Media\", \"Email Marketing\"],\n    jobTitles: [\"Content Writer\", \"Marketing Manager\", \"Social Media Manager\"],\n  },\n  {\n    id: \"2\",\n    name: \"Canva AI\",\n    subtitle: \"Design & Visuals\",\n    description: \"Create stunning designs with AI-powered tools\",\n    fullDescription: \"Canva AI revolutionizes graphic design with intelligent tools that help you create professional visuals in minutes. From social media graphics to presentations, Canva's AI assists with design suggestions, background removal, and smart resizing.\",\n    category: \"design\",\n    price: \"Freemium\",\n    rating: \"4.9\",\n    icon: \"🎨\",\n    color: \"#ec4899\",\n    logoUrl: \"https://www.canva.com/favicon.ico\",\n    features: [\n      \"AI-powered design suggestions\",\n      \"Magic Eraser & Background Remover\",\n      \"250,000+ templates\",\n      \"Brand kit management\",\n      \"Video editing tools\",\n      \"Team collaboration\"\n    ],\n    pricingTiers: [\n      { name: \"Free\", price: \"$0\", features: [\"Basic templates\", \"5GB storage\", \"Limited AI features\"] },\n      { name: \"Pro\", price: \"$12.99/mo\", features: [\"Premium templates\", \"100GB storage\", \"All AI features\", \"Brand kit\"] },\n      { name: \"Teams\", price: \"$14.99/user/mo\", features: [\"Everything in Pro\", \"Unlimited storage\", \"Team features\"] }\n    ],\n    useCases: [\"Social media graphics\", \"Presentations\", \"Marketing materials\", \"Logos\", \"Video content\"],\n    website: \"https://canva.com\",\n    popularity: 12000,\n    createdAt: new Date('2024-11-20'),\n    teamSize: [\"individual\", \"small\", \"medium\", \"enterprise\"],\n    hasFreeTier: true,\n    popularFeatures: [\"Team Collaboration\", \"Mobile App\", \"Integrations\"],\n    commonUseCases: [\"Design\", \"Social Media\", \"Marketing\"],\n    jobTitles: [\"Graphic Designer\", \"Social Media Manager\", \"Marketing Manager\"],\n  },\n  {\n    id: \"3\",\n    name: \"Copy.ai\",\n    subtitle: \"Marketing Texts\",\n    description: \"Generate high-converting marketing copy instantly\",\n    fullDescription: \"Copy.ai uses advanced AI to generate persuasive marketing copy for ads, emails, websites, and more. Perfect for marketers who need to produce engaging content quickly without sacrificing quality.\",\n    category: \"marketing\",\n    price: \"Freemium\",\n    rating: \"4.7\",\n    icon: \"📝\",\n    color: \"#8b5cf6\",\n    logoUrl: \"https://www.copy.ai/favicon.ico\",\n    features: [\n      \"90+ copywriting tools\",\n      \"Blog post wizard\",\n      \"Sales copy generator\",\n      \"Email sequences\",\n      \"Product descriptions\",\n      \"A/B testing suggestions\"\n    ],\n    pricingTiers: [\n      { name: \"Free\", price: \"$0\", features: [\"2,000 words/month\", \"Basic tools\", \"1 user\"] },\n      { name: \"Pro\", price: \"$49/mo\", features: [\"Unlimited words\", \"All tools\", \"Priority support\", \"5 users\"] },\n      { name: \"Enterprise\", price: \"Custom\", features: [\"Custom AI training\", \"Dedicated support\", \"Unlimited users\"] }\n    ],\n    useCases: [\"Ad copy\", \"Email marketing\", \"Landing pages\", \"Product launches\", \"Sales funnels\"],\n    website: \"https://copy.ai\",\n    popularity: 8200,\n    createdAt: new Date('2025-09-10'),\n    teamSize: [\"individual\", \"small\", \"medium\"],\n    hasFreeTier: true,\n    popularFeatures: [\"API Access\", \"Team Collaboration\"],\n    commonUseCases: [\"Marketing\", \"Email Marketing\", \"Content Marketing\"],\n    jobTitles: [\"Marketing Manager\", \"Content Writer\"],\n  },\n  {\n    id: \"4\",\n    name: \"Grammarly\",\n    subtitle: \"Text Checking\",\n    description: \"Advanced grammar and writing enhancement\",\n    fullDescription: \"Grammarly is your AI-powered writing assistant that checks grammar, spelling, punctuation, and style. It provides real-time suggestions to improve clarity, engagement, and delivery across all your writing.\",\n    category: \"text\",\n    price: \"Freemium\",\n    rating: \"4.6\",\n    icon: \"✍️\",\n    color: \"#10b981\",\n    logoUrl: \"https://www.grammarly.com/favicon.ico\",\n    features: [\n      \"Grammar & spelling check\",\n      \"Tone detector\",\n      \"Plagiarism checker (Premium)\",\n      \"Writing clarity suggestions\",\n      \"Genre-specific style checks\",\n      \"Integration with 500,000+ apps\"\n    ],\n    pricingTiers: [\n      { name: \"Free\", price: \"$0\", features: [\"Basic grammar check\", \"Tone detection\", \"Limited suggestions\"] },\n      { name: \"Premium\", price: \"$12/mo\", features: [\"Advanced grammar\", \"Plagiarism checker\", \"Style suggestions\"] },\n      { name: \"Business\", price: \"$15/user/mo\", features: [\"Team features\", \"Brand tone\", \"Analytics dashboard\"] }\n    ],\n    useCases: [\"Business emails\", \"Academic writing\", \"Content creation\", \"Professional documents\"],\n    website: \"https://grammarly.com\",\n    popularity: 15000,\n    createdAt: new Date('2024-08-05'),\n    teamSize: [\"individual\", \"small\", \"medium\", \"enterprise\"],\n    hasFreeTier: true,\n    popularFeatures: [\"Browser Extension\", \"Integrations\", \"Mobile App\"],\n    commonUseCases: [\"Content Marketing\", \"Email Marketing\"],\n    jobTitles: [\"Content Writer\", \"Customer Support Agent\"],\n  },\n  {\n    id: \"5\",\n    name: \"ChatGPT Plus\",\n    subtitle: \"Universal AI\",\n    description: \"Advanced AI assistant for any task\",\n    fullDescription: \"ChatGPT Plus gives you access to GPT-4, the most advanced AI model for conversations, coding, creative writing, analysis, and problem-solving. With faster response times and priority access during peak hours.\",\n    category: \"chat\",\n    logoUrl: \"https://chat.openai.com/favicon.ico\",\n    price: \"Freemium\",\n    rating: \"4.9\",\n    icon: \"🤖\",\n    color: \"#14b8a6\",\n    features: [\n      \"GPT-4 access\",\n      \"Faster response times\",\n      \"Priority access during peak times\",\n      \"Early access to new features\",\n      \"Advanced data analysis\",\n      \"Image generation (DALL-E 3)\"\n    ],\n    pricingTiers: [\n      { name: \"Free\", price: \"$0\", features: [\"GPT-3.5 access\", \"Standard response time\", \"Basic features\"] },\n      { name: \"Plus\", price: \"$20/mo\", features: [\"GPT-4 access\", \"Priority access\", \"All features\", \"Image generation\"] }\n    ],\n    useCases: [\"Coding assistance\", \"Research\", \"Creative writing\", \"Problem solving\", \"Learning\"],\n    website: \"https://chat.openai.com\",\n    popularity: 20000,\n    createdAt: new Date('2025-07-01'),\n    teamSize: [\"individual\"],\n    hasFreeTier: true,\n    popularFeatures: [\"API Access\", \"Mobile App\"],\n    commonUseCases: [\"Content Marketing\", \"Data Analysis\"],\n    jobTitles: [\"Content Writer\", \"Marketing Manager\", \"Customer Support Agent\"],\n  },\n  {\n    id: \"6\",\n    name: \"Buffer AI\",\n    subtitle: \"Social Media\",\n    description: \"Optimize your social media strategy with AI\",\n    fullDescription: \"Buffer AI helps you plan, create, and schedule social media content with AI-powered suggestions. Get optimal posting times, content ideas, and performance analytics all in one platform.\",\n    category: \"social\",\n    price: \"Freemium\",\n    rating: \"4.5\",\n    icon: \"📱\",\n    color: \"#f59e0b\",\n    logoUrl: \"https://buffer.com/favicon.ico\",\n    features: [\n      \"AI content suggestions\",\n      \"Optimal posting times\",\n      \"Multi-platform scheduling\",\n      \"Analytics dashboard\",\n      \"Team collaboration\",\n      \"Hashtag recommendations\"\n    ],\n    pricingTiers: [\n      { name: \"Free\", price: \"$0\", features: [\"3 social channels\", \"10 scheduled posts\", \"Basic analytics\"] },\n      { name: \"Essentials\", price: \"$6/mo\", features: [\"All channels\", \"Unlimited posts\", \"AI suggestions\"] },\n      { name: \"Team\", price: \"$12/user/mo\", features: [\"Team features\", \"Advanced analytics\", \"Priority support\"] }\n    ],\n    useCases: [\"Social media management\", \"Content planning\", \"Team collaboration\", \"Analytics tracking\"],\n    website: \"https://buffer.com\",\n    popularity: 7500,\n    createdAt: new Date('2025-04-12'),\n    teamSize: [\"individual\", \"small\", \"medium\"],\n    hasFreeTier: true,\n    popularFeatures: [\"Team Collaboration\", \"Integrations\"],\n    commonUseCases: [\"Social Media\", \"Marketing\"],\n    jobTitles: [\"Social Media Manager\", \"Marketing Manager\"],\n  },\n  {\n    id: \"7\",\n    name: \"Writesonic\",\n    subtitle: \"AI Content Writer\",\n    description: \"AI writing tool for articles, blogs, and ads\",\n    fullDescription: \"Writesonic is an AI-powered writing platform that creates SEO-optimized content for blogs, ads, emails, and websites. With advanced AI models, it helps you generate engaging content in seconds.\",\n    category: \"copywriting\",\n    price: \"Freemium\",\n    rating: \"4.6\",\n    icon: \"✨\",\n    color: \"#8b5cf6\",\n    logoUrl: \"https://writesonic.com/favicon.ico\",\n    features: [\n      \"AI article writer\",\n      \"SEO optimization\",\n      \"Multi-language support\",\n      \"Plagiarism checker\",\n      \"Chrome extension\",\n      \"Brand voice\"\n    ],\n    pricingTiers: [\n      { name: \"Free\", price: \"$0\", features: [\"10,000 words/month\", \"Basic features\", \"GPT-3.5\"] },\n      { name: \"Pro\", price: \"$19/mo\", features: [\"Unlimited words\", \"GPT-4\", \"All features\"] },\n      { name: \"Enterprise\", price: \"Custom\", features: [\"Custom AI\", \"Dedicated support\", \"API access\"] }\n    ],\n    useCases: [\"Blog writing\", \"Ad copy\", \"SEO content\", \"Email marketing\", \"Product descriptions\"],\n    website: \"https://writesonic.com\",\n    popularity: 7800,\n    createdAt: new Date('2025-09-20'),\n    teamSize: [\"individual\", \"small\"],\n    hasFreeTier: true,\n    popularFeatures: [\"Browser Extension\", \"API Access\", \"Multi-language\", \"SEO Tools\"],\n    commonUseCases: [\"Content Marketing\", \"SEO\", \"Email Marketing\"],\n    jobTitles: [\"Content Writer\", \"Marketing Manager\"],\n  },\n  {\n    id: \"8\",\n    name: \"Adobe Firefly\",\n    subtitle: \"Generative AI\",\n    description: \"Create stunning images and effects with AI\",\n    fullDescription: \"Adobe Firefly is a generative AI tool that creates images, text effects, and design elements from simple text descriptions. Integrated with Creative Cloud, Firefly helps designers explore ideas and iterate faster.\",\n    category: \"design\",\n    price: \"Freemium\",\n    rating: \"4.8\",\n    icon: \"🎨\",\n    color: \"#f59e0b\",\n    logoUrl: \"https://www.adobe.com/favicon.ico\",\n    features: [\n      \"Text to image generation\",\n      \"Generative fill\",\n      \"Text effects\",\n      \"Creative Cloud integration\",\n      \"Commercial safe assets\",\n      \"Style presets\"\n    ],\n    pricingTiers: [\n      { name: \"Free\", price: \"$0\", features: [\"25 credits/month\", \"Basic features\", \"Watermarked\"] },\n      { name: \"Premium\", price: \"$14.99/mo\", features: [\"100 credits/month\", \"All features\", \"No watermark\", \"Commercial use\"] },\n      { name: \"Creative Cloud\", price: \"$54.99/mo\", features: [\"Unlimited credits\", \"Full CC suite\", \"Cloud storage\"] }\n    ],\n    useCases: [\"Concept art\", \"Social media graphics\", \"Marketing visuals\", \"Product mockups\", \"Illustrations\"],\n    website: \"https://firefly.adobe.com\",\n    popularity: 9800,\n    createdAt: new Date('2025-05-15'),\n    teamSize: [\"individual\", \"small\", \"medium\", \"enterprise\"],\n    hasFreeTier: true,\n    popularFeatures: [\"Integrations\", \"Mobile App\"],\n    commonUseCases: [\"Design\", \"Marketing\", \"Social Media\"],\n    jobTitles: [\"Graphic Designer\", \"Marketing Manager\"],\n  },\n];\n\nexport interface Job {\n  id: string;\n  title: string;\n  aiImpact: number; // 0-100\n  tasksCount: number;\n  aisCount: number;\n  category: string;\n  description: string;\n  tasks: string[]; // Professional tasks within this job\n}\n\nexport const MOCK_JOBS: Job[] = [\n  {\n    id: \"1\",\n    title: \"Content Writer\",\n    aiImpact: 85,\n    tasksCount: 12,\n    aisCount: 8,\n    category: \"Creative\",\n    description: \"Creates written content for websites, blogs, and marketing materials\",\n    tasks: [\n      \"Write blog posts and articles\",\n      \"Create SEO-optimized content\",\n      \"Develop marketing copy\",\n      \"Edit and proofread content\",\n      \"Research industry topics\",\n      \"Write product descriptions\",\n      \"Create social media captions\",\n      \"Develop email newsletters\",\n      \"Write case studies\",\n      \"Create white papers\",\n      \"Develop landing page copy\",\n      \"Manage content calendar\"\n    ]\n  },\n  {\n    id: \"2\",\n    title: \"Graphic Designer\",\n    aiImpact: 72,\n    tasksCount: 15,\n    aisCount: 10,\n    category: \"Creative\",\n    description: \"Designs visual content for digital and print media\",\n    tasks: [\n      \"Create social media graphics\",\n      \"Design marketing materials\",\n      \"Develop brand identity\",\n      \"Create infographics\",\n      \"Design website layouts\",\n      \"Edit and retouch images\",\n      \"Create presentation templates\",\n      \"Design print materials (brochures, flyers)\",\n      \"Develop icon sets\",\n      \"Create illustrations\",\n      \"Design email templates\",\n      \"Manage brand guidelines\",\n      \"Create packaging designs\",\n      \"Design advertisements\",\n      \"Develop motion graphics\"\n    ]\n  },\n  {\n    id: \"3\",\n    title: \"Software Developer\",\n    aiImpact: 68,\n    tasksCount: 20,\n    aisCount: 12,\n    category: \"Technology\",\n    description: \"Develops and maintains software applications\",\n    tasks: []\n  },\n  {\n    id: \"4\",\n    title: \"Data Analyst\",\n    aiImpact: 78,\n    tasksCount: 14,\n    aisCount: 9,\n    category: \"Analytics\",\n    description: \"Analyzes data to provide business insights\",\n    tasks: []\n  },\n  {\n    id: \"5\",\n    title: \"Marketing Manager\",\n    aiImpact: 65,\n    tasksCount: 18,\n    aisCount: 11,\n    category: \"Marketing\",\n    description: \"Plans and executes marketing strategies\",\n    tasks: [\n      \"Develop marketing strategy\",\n      \"Plan campaign budgets\",\n      \"Analyze market trends\",\n      \"Coordinate team activities\",\n      \"Manage marketing campaigns\",\n      \"Track campaign performance\",\n      \"Create marketing reports\",\n      \"Conduct market research\",\n      \"Manage brand positioning\",\n      \"Oversee content creation\",\n      \"Develop product launches\",\n      \"Manage vendor relationships\",\n      \"Coordinate events and webinars\",\n      \"Optimize marketing funnels\",\n      \"Manage email marketing\",\n      \"Analyze competitor strategies\",\n      \"Set KPIs and goals\",\n      \"Present results to stakeholders\"\n    ]\n  },\n  {\n    id: \"6\",\n    title: \"Customer Support Agent\",\n    aiImpact: 82,\n    tasksCount: 10,\n    aisCount: 7,\n    category: \"Service\",\n    description: \"Provides customer service and technical support\",\n    tasks: [\n      \"Respond to customer inquiries\",\n      \"Resolve customer complaints\",\n      \"Provide technical support\",\n      \"Update customer records\",\n      \"Create support documentation\",\n      \"Process refunds and returns\",\n      \"Escalate complex issues\",\n      \"Track support metrics\",\n      \"Train new support staff\",\n      \"Improve customer satisfaction\"\n    ]\n  },\n  {\n    id: \"7\",\n    title: \"Social Media Manager\",\n    aiImpact: 88,\n    tasksCount: 16,\n    aisCount: 13,\n    category: \"Marketing\",\n    description: \"Manages social media presence and engagement\",\n    tasks: [\n      \"Create social media content\",\n      \"Schedule and publish posts\",\n      \"Respond to comments and messages\",\n      \"Analyze engagement metrics\",\n      \"Develop content calendar\",\n      \"Run social media campaigns\",\n      \"Create social media graphics\",\n      \"Write engaging captions\",\n      \"Monitor brand mentions\",\n      \"Manage influencer partnerships\",\n      \"Create video content\",\n      \"Develop hashtag strategy\",\n      \"Track competitor activity\",\n      \"Report on social performance\",\n      \"Manage community engagement\",\n      \"Create social media ads\"\n    ]\n  },\n  {\n    id: \"8\",\n    title: \"Copywriter\",\n    aiImpact: 87,\n    tasksCount: 11,\n    aisCount: 9,\n    category: \"Creative\",\n    description: \"Writes persuasive copy for ads and marketing\",\n    tasks: []\n  },\n  {\n    id: \"9\",\n    title: \"UX/UI Designer\",\n    aiImpact: 60,\n    tasksCount: 17,\n    aisCount: 8,\n    category: \"Creative\",\n    description: \"Designs user experiences and interfaces\",\n    tasks: []\n  },\n  {\n    id: \"10\",\n    title: \"Product Manager\",\n    aiImpact: 55,\n    tasksCount: 22,\n    aisCount: 10,\n    category: \"Management\",\n    description: \"Manages product development and strategy\",\n    tasks: []\n  },\n  {\n    id: \"11\",\n    title: \"Video Editor\",\n    aiImpact: 75,\n    tasksCount: 13,\n    aisCount: 11,\n    category: \"Creative\",\n    description: \"Edits and produces video content\",\n    tasks: []\n  },\n  {\n    id: \"12\",\n    title: \"Translator\",\n    aiImpact: 90,\n    tasksCount: 8,\n    aisCount: 6,\n    category: \"Language\",\n    description: \"Translates content between languages\",\n    tasks: []\n  },\n  {\n    id: \"13\",\n    title: \"Sales Representative\",\n    aiImpact: 58,\n    tasksCount: 19,\n    aisCount: 9,\n    category: \"Sales\",\n    description: \"Sells products and services to customers\",\n    tasks: []\n  },\n  {\n    id: \"14\",\n    title: \"Email Marketer\",\n    aiImpact: 83,\n    tasksCount: 12,\n    aisCount: 10,\n    category: \"Marketing\",\n    description: \"Creates and manages email marketing campaigns\",\n    tasks: []\n  },\n  {\n    id: \"15\",\n    title: \"SEO Specialist\",\n    aiImpact: 70,\n    tasksCount: 15,\n    aisCount: 12,\n    category: \"Marketing\",\n    description: \"Optimizes content for search engines\",\n    tasks: []\n  },\n  {\n    id: \"16\",\n    title: \"Business Analyst\",\n    aiImpact: 66,\n    tasksCount: 18,\n    aisCount: 11,\n    category: \"Analytics\",\n    description: \"Analyzes business processes and requirements\",\n    tasks: []\n  },\n  {\n    id: \"17\",\n    title: \"HR Recruiter\",\n    aiImpact: 62,\n    tasksCount: 16,\n    aisCount: 8,\n    category: \"Human Resources\",\n    description: \"Recruits and screens job candidates\",\n    tasks: []\n  },\n  {\n    id: \"18\",\n    title: \"Financial Analyst\",\n    aiImpact: 73,\n    tasksCount: 17,\n    aisCount: 10,\n    category: \"Finance\",\n    description: \"Analyzes financial data and trends\",\n    tasks: []\n  },\n  {\n    id: \"19\",\n    title: \"Project Manager\",\n    aiImpact: 52,\n    tasksCount: 20,\n    aisCount: 9,\n    category: \"Management\",\n    description: \"Manages projects and coordinates teams\",\n    tasks: []\n  },\n  {\n    id: \"20\",\n    title: \"Research Analyst\",\n    aiImpact: 76,\n    tasksCount: 14,\n    aisCount: 11,\n    category: \"Analytics\",\n    description: \"Conducts research and data analysis\",\n    tasks: []\n  }\n];\n","size_bytes":19712},"client/src/components/examples/ServiceCard.tsx":{"content":"import ServiceCard from \"../ServiceCard\";\n\nexport default function ServiceCardExample() {\n  return (\n    <div className=\"w-96\">\n      <ServiceCard\n        id=\"1\"\n        name=\"Jasper AI\"\n        subtitle=\"AI Copywriting\"\n        description=\"Content creation for marketing, blogs, and social media\"\n        price=\"Freemium\"\n        rating=\"4.8\"\n        icon=\"✨\"\n        color=\"#6366f1\"\n      />\n    </div>\n  );\n}\n","size_bytes":415},"client/src/components/FilterPanel.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Star, Sparkles, TrendingUp, Gift, Users } from \"lucide-react\";\n\ninterface FilterPanelProps {\n  category: string;\n  onCategoryChange: (value: string) => void;\n  priceFilters: {\n    free: boolean;\n    freemium: boolean;\n    paid: boolean;\n  };\n  onPriceFilterChange: (filter: keyof FilterPanelProps['priceFilters']) => void;\n  rating: string;\n  onRatingChange: (value: string) => void;\n  features: string[];\n  onFeaturesChange: (features: string[]) => void;\n  useCases: string[];\n  onUseCasesChange: (useCases: string[]) => void;\n  hasFreeTierOnly: boolean;\n  onHasFreeTierChange: (value: boolean) => void;\n  priceRange: string;\n  onPriceRangeChange: (value: string) => void;\n  newness: string;\n  onNewnessChange: (value: string) => void;\n  teamSize: string[];\n  onTeamSizeChange: (teamSize: string[]) => void;\n  quickFilter: string;\n  onQuickFilterChange: (filter: string) => void;\n  onReset: () => void;\n}\n\nconst POPULAR_FEATURES = [\n  \"API Access\",\n  \"Mobile App\",\n  \"Browser Extension\",\n  \"Team Collaboration\",\n  \"Multi-language\",\n  \"Integrations\",\n  \"SEO Tools\",\n];\n\nconst COMMON_USE_CASES = [\n  \"Content Marketing\",\n  \"SEO\",\n  \"Social Media\",\n  \"Email Marketing\",\n  \"Design\",\n  \"Marketing\",\n  \"Data Analysis\",\n];\n\nconst TEAM_SIZES = [\n  { value: \"individual\", label: \"Individual\" },\n  { value: \"small\", label: \"Small (2-10)\" },\n  { value: \"medium\", label: \"Medium (10-100)\" },\n  { value: \"enterprise\", label: \"Enterprise (100+)\" },\n];\n\nconst QUICK_FILTERS = [\n  { value: \"popular\", label: \"Popular\", icon: TrendingUp },\n  { value: \"new\", label: \"New\", icon: Sparkles },\n  { value: \"free\", label: \"Best Free\", icon: Gift },\n  { value: \"teams\", label: \"For Teams\", icon: Users },\n];\n\nexport default function FilterPanel({\n  category,\n  onCategoryChange,\n  priceFilters,\n  onPriceFilterChange,\n  rating,\n  onRatingChange,\n  features,\n  onFeaturesChange,\n  useCases,\n  onUseCasesChange,\n  hasFreeTierOnly,\n  onHasFreeTierChange,\n  priceRange,\n  onPriceRangeChange,\n  newness,\n  onNewnessChange,\n  teamSize,\n  onTeamSizeChange,\n  quickFilter,\n  onQuickFilterChange,\n  onReset,\n}: FilterPanelProps) {\n  const toggleFeature = (feature: string) => {\n    const currentFeatures = features || [];\n    if (currentFeatures.includes(feature)) {\n      onFeaturesChange(currentFeatures.filter(f => f !== feature));\n    } else {\n      onFeaturesChange([...currentFeatures, feature]);\n    }\n  };\n\n  const toggleUseCase = (useCase: string) => {\n    const currentUseCases = useCases || [];\n    if (currentUseCases.includes(useCase)) {\n      onUseCasesChange(currentUseCases.filter(u => u !== useCase));\n    } else {\n      onUseCasesChange([...currentUseCases, useCase]);\n    }\n  };\n\n  const toggleTeamSize = (size: string) => {\n    const currentTeamSize = teamSize || [];\n    if (currentTeamSize.includes(size)) {\n      onTeamSizeChange(currentTeamSize.filter(s => s !== size));\n    } else {\n      onTeamSizeChange([...currentTeamSize, size]);\n    }\n  };\n\n  return (\n    <div className=\"w-72 bg-card border border-card-border rounded-md p-6 space-y-4\">\n      <div className=\"space-y-3\">\n        <Label className=\"text-sm font-semibold\">Quick Filters</Label>\n        <div className=\"flex flex-wrap gap-2\">\n          {QUICK_FILTERS.map((filter) => {\n            const Icon = filter.icon;\n            return (\n              <Badge\n                key={filter.value}\n                variant={quickFilter === filter.value ? \"default\" : \"outline\"}\n                className=\"cursor-pointer hover-elevate active-elevate-2\"\n                onClick={() => onQuickFilterChange(filter.value === quickFilter ? \"\" : filter.value)}\n                data-testid={`badge-quick-${filter.value}`}\n              >\n                <Icon className=\"h-3 w-3 mr-1\" />\n                {filter.label}\n              </Badge>\n            );\n          })}\n        </div>\n      </div>\n\n      <Separator />\n\n      <div className=\"space-y-3\">\n        <Label className=\"text-sm font-semibold\">Category</Label>\n        <Select value={category} onValueChange={onCategoryChange}>\n          <SelectTrigger data-testid=\"select-category\">\n            <SelectValue placeholder=\"All categories\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All categories</SelectItem>\n            <SelectItem value=\"copywriting\">Copywriting</SelectItem>\n            <SelectItem value=\"design\">Design & Visuals</SelectItem>\n            <SelectItem value=\"marketing\">Marketing</SelectItem>\n            <SelectItem value=\"text\">Text Processing</SelectItem>\n            <SelectItem value=\"chat\">Chat & AI</SelectItem>\n            <SelectItem value=\"social\">Social Media</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <Accordion type=\"multiple\" className=\"w-full\">\n        <AccordionItem value=\"price\">\n          <AccordionTrigger className=\"text-sm font-semibold hover:no-underline\">\n            Price\n          </AccordionTrigger>\n          <AccordionContent className=\"space-y-3 pt-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"has-free-tier\"\n                checked={hasFreeTierOnly}\n                onCheckedChange={onHasFreeTierChange}\n                data-testid=\"checkbox-has-free-tier\"\n              />\n              <Label htmlFor=\"has-free-tier\" className=\"text-sm font-normal cursor-pointer\">\n                Has free tier\n              </Label>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label className=\"text-xs text-muted-foreground\">Price Type</Label>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"free\"\n                    checked={priceFilters.free}\n                    onCheckedChange={() => onPriceFilterChange('free')}\n                    data-testid=\"checkbox-price-free\"\n                  />\n                  <Label htmlFor=\"free\" className=\"text-sm font-normal cursor-pointer\">\n                    Free\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"freemium\"\n                    checked={priceFilters.freemium}\n                    onCheckedChange={() => onPriceFilterChange('freemium')}\n                    data-testid=\"checkbox-price-freemium\"\n                  />\n                  <Label htmlFor=\"freemium\" className=\"text-sm font-normal cursor-pointer\">\n                    Freemium\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"paid\"\n                    checked={priceFilters.paid}\n                    onCheckedChange={() => onPriceFilterChange('paid')}\n                    data-testid=\"checkbox-price-paid\"\n                  />\n                  <Label htmlFor=\"paid\" className=\"text-sm font-normal cursor-pointer\">\n                    Paid\n                  </Label>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label className=\"text-xs text-muted-foreground\">Price Range</Label>\n              <Select value={priceRange} onValueChange={onPriceRangeChange}>\n                <SelectTrigger data-testid=\"select-price-range\">\n                  <SelectValue placeholder=\"Any price\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Any price</SelectItem>\n                  <SelectItem value=\"0-10\">Up to $10/mo</SelectItem>\n                  <SelectItem value=\"10-50\">$10-$50/mo</SelectItem>\n                  <SelectItem value=\"50-100\">$50-$100/mo</SelectItem>\n                  <SelectItem value=\"100+\">$100+/mo</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </AccordionContent>\n        </AccordionItem>\n\n        <AccordionItem value=\"rating\">\n          <AccordionTrigger className=\"text-sm font-semibold hover:no-underline\">\n            Rating\n          </AccordionTrigger>\n          <AccordionContent className=\"space-y-2 pt-2\">\n            {['5.0', '4.0+', '3.0+'].map((ratingValue) => (\n              <div key={ratingValue} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`rating-${ratingValue}`}\n                  checked={rating === ratingValue}\n                  onCheckedChange={() => onRatingChange(ratingValue)}\n                  data-testid={`checkbox-rating-${ratingValue}`}\n                />\n                <Label\n                  htmlFor={`rating-${ratingValue}`}\n                  className=\"text-sm font-normal cursor-pointer flex items-center gap-1\"\n                >\n                  <Star className=\"h-4 w-4 fill-yellow-500 text-yellow-500\" />\n                  {ratingValue}\n                </Label>\n              </div>\n            ))}\n          </AccordionContent>\n        </AccordionItem>\n\n        <AccordionItem value=\"features\">\n          <AccordionTrigger className=\"text-sm font-semibold hover:no-underline\">\n            Features\n          </AccordionTrigger>\n          <AccordionContent className=\"space-y-2 pt-2\">\n            {POPULAR_FEATURES.map((feature) => (\n              <div key={feature} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`feature-${feature}`}\n                  checked={(features || []).includes(feature)}\n                  onCheckedChange={() => toggleFeature(feature)}\n                  data-testid={`checkbox-feature-${feature.toLowerCase().replace(/\\s+/g, '-')}`}\n                />\n                <Label\n                  htmlFor={`feature-${feature}`}\n                  className=\"text-sm font-normal cursor-pointer\"\n                >\n                  {feature}\n                </Label>\n              </div>\n            ))}\n          </AccordionContent>\n        </AccordionItem>\n\n        <AccordionItem value=\"use-cases\">\n          <AccordionTrigger className=\"text-sm font-semibold hover:no-underline\">\n            Use Cases\n          </AccordionTrigger>\n          <AccordionContent className=\"space-y-2 pt-2\">\n            {COMMON_USE_CASES.map((useCase) => (\n              <div key={useCase} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`usecase-${useCase}`}\n                  checked={(useCases || []).includes(useCase)}\n                  onCheckedChange={() => toggleUseCase(useCase)}\n                  data-testid={`checkbox-usecase-${useCase.toLowerCase().replace(/\\s+/g, '-')}`}\n                />\n                <Label\n                  htmlFor={`usecase-${useCase}`}\n                  className=\"text-sm font-normal cursor-pointer\"\n                >\n                  {useCase}\n                </Label>\n              </div>\n            ))}\n          </AccordionContent>\n        </AccordionItem>\n\n        <AccordionItem value=\"team-size\">\n          <AccordionTrigger className=\"text-sm font-semibold hover:no-underline\">\n            Team Size\n          </AccordionTrigger>\n          <AccordionContent className=\"space-y-2 pt-2\">\n            {TEAM_SIZES.map((size) => (\n              <div key={size.value} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`teamsize-${size.value}`}\n                  checked={(teamSize || []).includes(size.value)}\n                  onCheckedChange={() => toggleTeamSize(size.value)}\n                  data-testid={`checkbox-teamsize-${size.value}`}\n                />\n                <Label\n                  htmlFor={`teamsize-${size.value}`}\n                  className=\"text-sm font-normal cursor-pointer\"\n                >\n                  {size.label}\n                </Label>\n              </div>\n            ))}\n          </AccordionContent>\n        </AccordionItem>\n\n        <AccordionItem value=\"newness\">\n          <AccordionTrigger className=\"text-sm font-semibold hover:no-underline\">\n            Newness\n          </AccordionTrigger>\n          <AccordionContent className=\"pt-2\">\n            <Select value={newness} onValueChange={onNewnessChange}>\n              <SelectTrigger data-testid=\"select-newness\">\n                <SelectValue placeholder=\"Any time\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Any time</SelectItem>\n                <SelectItem value=\"1month\">Last month</SelectItem>\n                <SelectItem value=\"3months\">Last 3 months</SelectItem>\n                <SelectItem value=\"6months\">Last 6 months</SelectItem>\n              </SelectContent>\n            </Select>\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n\n      <Button\n        variant=\"outline\"\n        className=\"w-full\"\n        onClick={onReset}\n        data-testid=\"button-reset-filters\"\n      >\n        Reset All\n      </Button>\n    </div>\n  );\n}\n","size_bytes":13458},"client/src/pages/History.tsx":{"content":"import { useLocation, Link } from \"wouter\";\nimport ServiceCard from \"@/components/ServiceCard\";\nimport { MOCK_SERVICES } from \"@/lib/mockData\";\nimport { Button } from \"@/components/ui/button\";\nimport { Trash2 } from \"lucide-react\";\nimport { useApp } from \"@/context/AppContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\n\nexport default function History() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { history, favorites, comparing, toggleFavorite, toggleCompare, clearHistory, addToHistory } = useApp();\n  const historyIds = history;\n\n  const handleFavoriteToggle = (serviceId: string, isFavorite: boolean) => {\n    toggleFavorite(serviceId);\n  };\n\n  const handleCompareToggle = (serviceId: string, isComparing: boolean) => {\n    const success = toggleCompare(serviceId);\n    if (!success) {\n      toast({\n        title: \"Comparison limit reached\",\n        description: \"You can compare up to 4 services at once\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleClearHistory = () => {\n    if (confirm('Are you sure you want to clear your viewing history?')) {\n      clearHistory();\n    }\n  };\n\n  const handleServiceClick = (serviceId: string) => {\n    addToHistory(serviceId);\n    setLocation(`/service/${serviceId}`);\n  };\n\n  const historyServices = MOCK_SERVICES.filter(service => historyIds.includes(service.id));\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-6\">\n        <Breadcrumb data-testid=\"breadcrumb-history\">\n          <BreadcrumbList>\n            <BreadcrumbItem>\n              <BreadcrumbLink asChild>\n                <Link href=\"/\" data-testid=\"link-breadcrumb-home\">Home</Link>\n              </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n            <BreadcrumbItem>\n              <BreadcrumbPage data-testid=\"text-breadcrumb-history\">History</BreadcrumbPage>\n            </BreadcrumbItem>\n          </BreadcrumbList>\n        </Breadcrumb>\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold tracking-tight\" data-testid=\"text-history-title\">\n              Viewing History\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Recently viewed services\n            </p>\n          </div>\n\n          <Button\n            onClick={handleClearHistory}\n            variant=\"outline\"\n            className=\"gap-2\"\n            data-testid=\"button-clear-history\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n            Clear History\n          </Button>\n        </div>\n\n        {historyServices.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {historyServices.map(service => (\n              <ServiceCard\n                key={service.id}\n                id={service.id}\n                name={service.name}\n                subtitle={service.subtitle}\n                description={service.description}\n                price={service.price}\n                rating={service.rating}\n                icon={service.icon}\n                color={service.color}\n                logoUrl={service.logoUrl}\n                onFavoriteToggle={handleFavoriteToggle}\n                onCompareToggle={handleCompareToggle}\n                onClick={() => handleServiceClick(service.id)}\n                isFavorite={favorites.has(service.id)}\n                isComparing={comparing.has(service.id)}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-24\">\n            <p className=\"text-xl text-muted-foreground mb-4\">No viewing history</p>\n            <p className=\"text-sm text-muted-foreground\">\n              Services you view will appear here\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4064},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 0 0% 0%;\n\n  --border: 0 0% 96.47%;\n\n  --card: 0 0% 96.47%;\n\n  --card-foreground: 0 0% 0%;\n\n  --card-border: 240 4% 88%;\n\n  --sidebar: 180 6.6667% 97.0588%;\n\n  --sidebar-foreground: 210 25% 7.8431%;\n\n  --sidebar-border: 205.0000 25.0000% 90.5882%;\n\n  --sidebar-primary: 203.8863 88.2845% 53.1373%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 211.5789 51.3514% 92.7451%;\n\n  --sidebar-accent-foreground: 203.8863 88.2845% 53.1373%;\n\n  --sidebar-ring: 202.8169 89.1213% 53.1373%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 0 0% 0%;\n\n  --popover-border: 240 4% 84%;\n\n  --primary: 96 85.19% 73.53%;\n\n  --primary-foreground: 0 0% 0%;\n\n  --secondary: 0 0% 0%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 0 0% 96.08%;\n\n  --muted-foreground: 0 0% 52.94%;\n\n  --accent: 254.21 100% 92.55%;\n\n  --accent-foreground: 0 0% 0%;\n\n  --destructive: 2.04 74.62% 61.37%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 0%;\n  --ring: 0 0% 0%;\n  --chart-1: 203.8863 88.2845% 53.1373%;\n  --chart-2: 159.7826 100% 36.0784%;\n  --chart-3: 42.0290 92.8251% 56.2745%;\n  --chart-4: 147.1429 78.5047% 41.9608%;\n  --chart-5: 341.4894 75.2000% 50.9804%;\n\n  --font-sans: 'Space Grotesk', sans-serif;\n  --font-serif: 'Geist', sans-serif;\n  --font-mono: 'Geist Mono', monospace;\n  --radius: 0rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 0%;\n\n  --foreground: 200 6.6667% 91.1765%;\n\n  --border: 210 5.2632% 14.9020%;\n\n  --card: 228 9.8039% 10%;\n\n  --card-foreground: 0 0% 85.0980%;\n\n  --card-border: 240 5% 16%;\n\n  --sidebar: 228 9.8039% 10%;\n\n  --sidebar-foreground: 0 0% 85.0980%;\n\n  --sidebar-border: 205.7143 15.7895% 26.0784%;\n\n  --sidebar-primary: 202.8169 89.1213% 53.1373%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 205.7143 70% 7.8431%;\n\n  --sidebar-accent-foreground: 203.7736 87.6033% 52.5490%;\n\n  --sidebar-ring: 202.8169 89.1213% 53.1373%;\n\n  --popover: 0 0% 0%;\n\n  --popover-foreground: 200 6.6667% 91.1765%;\n\n  --popover-border: 240 5% 20%;\n\n  --primary: 203.7736 87.6033% 52.5490%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 195.0000 15.3846% 94.9020%;\n\n  --secondary-foreground: 210 25% 7.8431%;\n\n  --muted: 0 0% 9.4118%;\n\n  --muted-foreground: 210 3.3898% 46.2745%;\n\n  --accent: 205.7143 70% 7.8431%;\n\n  --accent-foreground: 203.7736 87.6033% 52.5490%;\n\n  --destructive: 356.3033 90.5579% 54.3137%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 207.6923 27.6596% 18.4314%;\n  --ring: 202.8169 89.1213% 53.1373%;\n  --chart-1: 203.8863 88.2845% 53.1373%;\n  --chart-2: 159.7826 100% 36.0784%;\n  --chart-3: 42.0290 92.8251% 56.2745%;\n  --chart-4: 147.1429 78.5047% 41.9608%;\n  --chart-5: 341.4894 75.2000% 50.9804%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --radius: 1.3rem;\n  --spacing: 0.25rem;\n  --font-mono: Menlo, monospace;\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --tracking-normal: 0em;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":13243},"client/src/lib/exportUtils.ts":{"content":"//todo: remove mock functionality - use real export library\nexport const exportToCSV = (data: any[], filename: string) => {\n  if (data.length === 0) {\n    console.log('No data to export');\n    return;\n  }\n\n  const headers = Object.keys(data[0]);\n  const csvContent = [\n    headers.join(','),\n    ...data.map(row => \n      headers.map(header => {\n        const value = row[header];\n        if (typeof value === 'string' && value.includes(',')) {\n          return `\"${value}\"`;\n        }\n        return value;\n      }).join(',')\n    )\n  ].join('\\n');\n\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(blob);\n  \n  link.setAttribute('href', url);\n  link.setAttribute('download', `${filename}.csv`);\n  link.style.visibility = 'hidden';\n  \n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  \n  console.log(`Exported ${data.length} items to ${filename}.csv`);\n};\n\nexport const exportToPDF = (data: any[], filename: string) => {\n  //todo: implement PDF export using a library like jsPDF\n  console.log('PDF export would create:', filename);\n  console.log('Data to export:', data);\n  alert('PDF export functionality would be implemented with a library like jsPDF');\n};\n","size_bytes":1301},"client/src/components/Navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Heart, Home, GitCompare, History, Bell, Calculator, Briefcase, TrendingUp, User, Wallet, ShoppingCart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface NavbarProps {\n  favoritesCount?: number;\n  comparingCount?: number;\n  notificationsCount?: number;\n  cartCount?: number;\n}\n\nexport default function Navbar({ \n  favoritesCount = 0, \n  comparingCount = 0,\n  notificationsCount = 0,\n  cartCount = 0\n}: NavbarProps) {\n  const [location] = useLocation();\n\n  const isActive = (path: string) => location === path;\n\n  return (\n    <nav className=\"border-b border-border bg-card/50 backdrop-blur-sm sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"flex items-center justify-between h-16\">\n          <a href=\"/\" className=\"text-2xl font-bold hover-elevate px-3 py-2 rounded-md transition-colors\" data-testid=\"link-home-logo\">\n            AI<span className=\"text-primary\">for</span>Business\n          </a>\n\n          <div className=\"flex items-center gap-1\">\n            <Button\n              asChild\n              variant={isActive(\"/\") ? \"secondary\" : \"ghost\"}\n              className=\"gap-2\"\n              data-testid=\"button-nav-home\"\n            >\n              <Link href=\"/\">\n                <Home className=\"h-4 w-4\" />\n                Home\n              </Link>\n            </Button>\n\n            <Button\n              asChild\n              variant={isActive(\"/favorites\") ? \"secondary\" : \"ghost\"}\n              className=\"gap-2\"\n              data-testid=\"button-nav-favorites\"\n            >\n              <Link href=\"/favorites\">\n                <Heart className=\"h-4 w-4\" />\n                Favorites\n                {favoritesCount > 0 && (\n                  <Badge variant=\"secondary\" className=\"ml-1\">\n                    {favoritesCount}\n                  </Badge>\n                )}\n              </Link>\n            </Button>\n\n            <Button\n              asChild\n              variant={isActive(\"/compare\") ? \"secondary\" : \"ghost\"}\n              className=\"gap-2\"\n              data-testid=\"button-nav-compare\"\n            >\n              <Link href=\"/compare\">\n                <GitCompare className=\"h-4 w-4\" />\n                Compare\n                {comparingCount > 0 && (\n                  <Badge variant=\"secondary\" className=\"ml-1\">\n                    {comparingCount}\n                  </Badge>\n                )}\n              </Link>\n            </Button>\n\n            <Button\n              asChild\n              variant={isActive(\"/history\") ? \"secondary\" : \"ghost\"}\n              className=\"gap-2\"\n              data-testid=\"button-nav-history\"\n            >\n              <Link href=\"/history\">\n                <History className=\"h-4 w-4\" />\n                History\n              </Link>\n            </Button>\n\n            <Button\n              asChild\n              variant={isActive(\"/notifications\") ? \"secondary\" : \"ghost\"}\n              className=\"gap-2 relative\"\n              data-testid=\"button-nav-notifications\"\n            >\n              <Link href=\"/notifications\">\n                <Bell className=\"h-4 w-4\" />\n                Notifications\n                {notificationsCount > 0 && (\n                  <Badge variant=\"destructive\" className=\"ml-1\">\n                    {notificationsCount}\n                  </Badge>\n                )}\n              </Link>\n            </Button>\n\n            <Button\n              asChild\n              variant={isActive(\"/calculator\") ? \"secondary\" : \"ghost\"}\n              className=\"gap-2\"\n              data-testid=\"button-nav-calculator\"\n            >\n              <Link href=\"/calculator\">\n                <Calculator className=\"h-4 w-4\" />\n                Calculator\n              </Link>\n            </Button>\n\n            <Button\n              asChild\n              variant={isActive(\"/use-cases\") ? \"secondary\" : \"ghost\"}\n              className=\"gap-2\"\n              data-testid=\"button-nav-usecases\"\n            >\n              <Link href=\"/use-cases\">\n                <Briefcase className=\"h-4 w-4\" />\n                Use Cases\n              </Link>\n            </Button>\n\n            <Button\n              asChild\n              variant={isActive(\"/job-impact\") ? \"secondary\" : \"ghost\"}\n              className=\"gap-2\"\n              data-testid=\"button-nav-jobimpact\"\n            >\n              <Link href=\"/job-impact\">\n                <TrendingUp className=\"h-4 w-4\" />\n                Job Impact\n              </Link>\n            </Button>\n\n            <Button\n              asChild\n              variant={isActive(\"/finances\") ? \"secondary\" : \"ghost\"}\n              className=\"gap-2\"\n              data-testid=\"button-nav-finances\"\n            >\n              <Link href=\"/finances\">\n                <Wallet className=\"h-4 w-4\" />\n                Finances\n              </Link>\n            </Button>\n\n            <Button\n              asChild\n              variant={isActive(\"/cart\") ? \"secondary\" : \"ghost\"}\n              className=\"gap-2\"\n              data-testid=\"button-nav-cart\"\n            >\n              <Link href=\"/cart\">\n                <ShoppingCart className=\"h-4 w-4\" />\n                Cart\n                {cartCount > 0 && (\n                  <Badge variant=\"secondary\" className=\"ml-1\">\n                    {cartCount}\n                  </Badge>\n                )}\n              </Link>\n            </Button>\n\n            <Button\n              asChild\n              variant={isActive(\"/account\") ? \"secondary\" : \"ghost\"}\n              className=\"gap-2\"\n              data-testid=\"button-nav-account\"\n            >\n              <Link href=\"/account\">\n                <User className=\"h-4 w-4\" />\n                Account\n              </Link>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5919},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/pages/UseCases.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Building2, ShoppingCart, Briefcase, Users } from \"lucide-react\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\n\ninterface UseCase {\n  industry: string;\n  title: string;\n  description: string;\n  tools: string[];\n  icon: React.ReactNode;\n  benefits: string[];\n}\n\n//todo: remove mock functionality - get from API\nconst USE_CASES: UseCase[] = [\n  {\n    industry: \"Marketing\",\n    title: \"Content Marketing Team\",\n    description: \"A digital marketing agency uses AI tools to streamline content creation, social media management, and campaign optimization.\",\n    tools: [\"Jasper AI\", \"Canva AI\", \"Copy.ai\", \"Buffer AI\"],\n    icon: <Building2 className=\"h-6 w-6\" />,\n    benefits: [\n      \"50% faster content creation\",\n      \"Consistent brand voice across platforms\",\n      \"Data-driven content strategy\",\n      \"Reduced design costs\"\n    ]\n  },\n  {\n    industry: \"E-commerce\",\n    title: \"Online Retail Store\",\n    description: \"An e-commerce business leverages AI to create product descriptions, marketing materials, and customer support content.\",\n    tools: [\"Copy.ai\", \"ChatGPT Plus\", \"Grammarly\", \"Canva AI\"],\n    icon: <ShoppingCart className=\"h-6 w-6\" />,\n    benefits: [\n      \"Automated product descriptions\",\n      \"Improved SEO performance\",\n      \"Higher conversion rates\",\n      \"24/7 customer support content\"\n    ]\n  },\n  {\n    industry: \"Tech Startup\",\n    title: \"SaaS Company\",\n    description: \"A software startup uses AI tools for documentation, blog posts, social media, and customer communications.\",\n    tools: [\"ChatGPT Plus\", \"Jasper AI\", \"Grammarly\", \"Buffer AI\"],\n    icon: <Briefcase className=\"h-6 w-6\" />,\n    benefits: [\n      \"Professional documentation\",\n      \"Consistent messaging\",\n      \"Faster time to market\",\n      \"Better user engagement\"\n    ]\n  },\n  {\n    industry: \"Professional Services\",\n    title: \"Consulting Firm\",\n    description: \"A consulting firm utilizes AI for proposal writing, client presentations, and research synthesis.\",\n    tools: [\"ChatGPT Plus\", \"Grammarly\", \"Canva AI\", \"Jasper AI\"],\n    icon: <Users className=\"h-6 w-6\" />,\n    benefits: [\n      \"Winning proposals faster\",\n      \"Professional presentations\",\n      \"Better client insights\",\n      \"Competitive advantage\"\n    ]\n  }\n];\n\nexport default function UseCases() {\n  const [selectedIndustry, setSelectedIndustry] = useState(\"Marketing\");\n\n  const currentUseCase = USE_CASES.find(uc => uc.industry === selectedIndustry);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-6\">\n        <Breadcrumb data-testid=\"breadcrumb-usecases\">\n          <BreadcrumbList>\n            <BreadcrumbItem>\n              <BreadcrumbLink asChild>\n                <Link href=\"/\" data-testid=\"link-breadcrumb-home\">Home</Link>\n              </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n            <BreadcrumbItem>\n              <BreadcrumbPage data-testid=\"text-breadcrumb-usecases\">Use Cases</BreadcrumbPage>\n            </BreadcrumbItem>\n          </BreadcrumbList>\n        </Breadcrumb>\n\n        <div>\n          <h1 className=\"text-4xl font-bold tracking-tight\" data-testid=\"text-usecases-title\">\n            Use Cases by Industry\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            See how different industries leverage AI tools for success\n          </p>\n        </div>\n\n        <Tabs value={selectedIndustry} onValueChange={setSelectedIndustry}>\n          <TabsList className=\"grid w-full grid-cols-4\">\n            {USE_CASES.map(useCase => (\n              <TabsTrigger\n                key={useCase.industry}\n                value={useCase.industry}\n                data-testid={`tab-${useCase.industry.toLowerCase()}`}\n              >\n                {useCase.industry}\n              </TabsTrigger>\n            ))}\n          </TabsList>\n\n          {USE_CASES.map(useCase => (\n            <TabsContent key={useCase.industry} value={useCase.industry} className=\"mt-8\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                <div className=\"lg:col-span-2 space-y-6\">\n                  <Card>\n                    <CardHeader className=\"space-y-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"p-3 bg-primary/10 text-primary rounded-md\">\n                          {useCase.icon}\n                        </div>\n                        <h2 className=\"text-2xl font-bold\">{useCase.title}</h2>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <p className=\"text-muted-foreground leading-relaxed\">\n                        {useCase.description}\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <h3 className=\"text-xl font-semibold\">Key Benefits</h3>\n                    </CardHeader>\n                    <CardContent>\n                      <ul className=\"space-y-3\">\n                        {useCase.benefits.map((benefit, index) => (\n                          <li key={index} className=\"flex items-start gap-3\">\n                            <span className=\"flex items-center justify-center h-6 w-6 rounded-full bg-primary/10 text-primary text-sm font-medium flex-shrink-0\">\n                              {index + 1}\n                            </span>\n                            <span className=\"text-muted-foreground pt-0.5\">{benefit}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <div className=\"lg:col-span-1\">\n                  <Card className=\"sticky top-24\">\n                    <CardHeader>\n                      <h3 className=\"text-xl font-semibold\">Recommended Tools</h3>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      {useCase.tools.map((tool, index) => (\n                        <div\n                          key={index}\n                          className=\"p-3 border border-border rounded-md hover-elevate transition-colors\"\n                        >\n                          <p className=\"font-medium\">{tool}</p>\n                        </div>\n                      ))}\n                      \n                      <div className=\"pt-4 border-t border-border\">\n                        <p className=\"text-sm text-muted-foreground mb-3\">\n                          This stack provides a complete solution for {useCase.industry.toLowerCase()}\n                        </p>\n                        <Badge className=\"w-full justify-center py-2\">\n                          {useCase.tools.length} Tools\n                        </Badge>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </TabsContent>\n          ))}\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7494},"client/src/pages/Home.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport SearchBar from \"@/components/SearchBar\";\nimport FilterPanel from \"@/components/FilterPanel\";\nimport ServiceCard from \"@/components/ServiceCard\";\nimport SortSelect, { type SortOption } from \"@/components/SortSelect\";\nimport { MOCK_SERVICES, MOCK_JOBS } from \"@/lib/mockData\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, GitCompare, X } from \"lucide-react\";\nimport { useApp } from \"@/context/AppContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { favorites, comparing, selectedCategory, setSelectedCategory, toggleFavorite, toggleCompare, addToHistory } = useApp();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [priceFilters, setPriceFilters] = useState({\n    free: false,\n    freemium: false,\n    paid: false,\n  });\n  const [rating, setRating] = useState(\"\");\n  const [sortBy, setSortBy] = useState<SortOption>(\"popularity\");\n  const [features, setFeatures] = useState<string[]>([]);\n  const [useCases, setUseCases] = useState<string[]>([]);\n  const [hasFreeTierOnly, setHasFreeTierOnly] = useState(false);\n  const [priceRange, setPriceRange] = useState(\"all\");\n  const [newness, setNewness] = useState(\"all\");\n  const [teamSize, setTeamSize] = useState<string[]>([]);\n  const [quickFilter, setQuickFilter] = useState(\"\");\n  const [selectedJobTitle, setSelectedJobTitle] = useState<string | null>(null);\n\n  // Extract jobTitle from URL params\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const jobTitle = params.get('jobTitle');\n    if (jobTitle) {\n      setSelectedJobTitle(jobTitle);\n    }\n  }, []);\n\n  // Find selected job\n  const selectedJob = useMemo(() => {\n    if (!selectedJobTitle) return null;\n    return MOCK_JOBS.find(job => job.title === selectedJobTitle);\n  }, [selectedJobTitle]);\n\n  const clearJobFilter = () => {\n    setSelectedJobTitle(null);\n    setLocation('/');\n  };\n\n  const handlePriceFilterChange = (filter: 'free' | 'freemium' | 'paid') => {\n    setPriceFilters(prev => ({ ...prev, [filter]: !prev[filter] }));\n  };\n\n  const handleQuickFilterChange = (filter: string) => {\n    // Reset other filters when applying quick filter\n    if (filter === \"\") {\n      setQuickFilter(\"\");\n      return;\n    }\n\n    setQuickFilter(filter);\n    \n    // Reset all filters first\n    setPriceFilters({ free: false, freemium: false, paid: false });\n    setRating(\"\");\n    setFeatures([]);\n    setUseCases([]);\n    setHasFreeTierOnly(false);\n    setPriceRange(\"all\");\n    setNewness(\"all\");\n    setTeamSize([]);\n\n    // Apply quick filter presets\n    switch (filter) {\n      case \"popular\":\n        setSortBy(\"popularity\");\n        setRating(\"4.0+\");\n        break;\n      case \"new\":\n        setNewness(\"3months\");\n        setSortBy(\"newest\");\n        break;\n      case \"free\":\n        setHasFreeTierOnly(true);\n        setSortBy(\"rating-desc\");\n        break;\n      case \"teams\":\n        setTeamSize([\"small\", \"medium\", \"enterprise\"]);\n        setFeatures([\"Team Collaboration\"]);\n        break;\n    }\n  };\n\n  const handleReset = () => {\n    setSelectedCategory(\"all\");\n    setPriceFilters({ free: false, freemium: false, paid: false });\n    setRating(\"\");\n    setSearchQuery(\"\");\n    setSortBy(\"popularity\");\n    setFeatures([]);\n    setUseCases([]);\n    setHasFreeTierOnly(false);\n    setPriceRange(\"all\");\n    setNewness(\"all\");\n    setTeamSize([]);\n    setQuickFilter(\"\");\n  };\n\n  const handleSearch = () => {\n    // Search is triggered automatically via filteredAndSortedServices\n  };\n\n  const handleFavoriteToggle = (serviceId: string, isFavorite: boolean) => {\n    toggleFavorite(serviceId);\n  };\n\n  const handleCompareToggle = (serviceId: string, isComparing: boolean) => {\n    const success = toggleCompare(serviceId);\n    if (!success) {\n      toast({\n        title: \"Comparison limit reached\",\n        description: \"You can compare up to 4 services at once\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleExport = () => {\n    const data = filteredAndSortedServices.map(s => ({\n      name: s.name,\n      subtitle: s.subtitle,\n      category: s.category,\n      price: s.price,\n      rating: s.rating,\n      website: s.website || '',\n    }));\n    \n    import('@/lib/exportUtils').then(({ exportToCSV }) => {\n      exportToCSV(data, 'ai-services');\n    });\n  };\n\n  const handleCompare = () => {\n    setLocation(\"/compare\");\n  };\n\n  const handleServiceClick = (serviceId: string) => {\n    addToHistory(serviceId);\n    setLocation(`/service/${serviceId}`);\n  };\n\n  const filteredAndSortedServices = useMemo(() => {\n    let filtered = MOCK_SERVICES.filter(service => {\n      // Search filter\n      const matchesSearch = searchQuery === \"\" || \n        service.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        service.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        service.subtitle.toLowerCase().includes(searchQuery.toLowerCase());\n\n      // Category filter\n      const matchesCategory = selectedCategory === \"all\" || service.category === selectedCategory;\n\n      // Price type filter\n      const matchesPrice = \n        (!priceFilters.free && !priceFilters.freemium && !priceFilters.paid) ||\n        (priceFilters.free && service.price === \"Free\") ||\n        (priceFilters.freemium && service.price === \"Freemium\") ||\n        (priceFilters.paid && service.price.includes(\"$\"));\n\n      // Rating filter\n      const matchesRating = \n        rating === \"\" ||\n        (rating === \"5.0\" && parseFloat(service.rating) === 5.0) ||\n        (rating === \"4.0+\" && parseFloat(service.rating) >= 4.0) ||\n        (rating === \"3.0+\" && parseFloat(service.rating) >= 3.0);\n\n      // Features filter\n      const matchesFeatures = features.length === 0 || \n        features.every(feature => service.popularFeatures?.includes(feature));\n\n      // Use cases filter\n      const matchesUseCases = useCases.length === 0 || \n        useCases.some(useCase => service.commonUseCases?.includes(useCase));\n\n      // Free tier filter\n      const matchesFreeTier = !hasFreeTierOnly || service.hasFreeTier;\n\n      // Price range filter\n      const matchesPriceRange = (() => {\n        if (priceRange === \"all\") return true;\n        \n        const getPrice = (price: string) => {\n          if (price === 'Free') return 0;\n          if (price === 'Freemium') return 0; // Freemium has free tier\n          const match = price.match(/\\$(\\d+)/);\n          return match ? parseInt(match[1]) : 999;\n        };\n        \n        const price = getPrice(service.price);\n        \n        switch (priceRange) {\n          case \"0-10\": return price <= 10;\n          case \"10-50\": return price > 10 && price <= 50;\n          case \"50-100\": return price > 50 && price <= 100;\n          case \"100+\": return price > 100;\n          default: return true;\n        }\n      })();\n\n      // Newness filter\n      const matchesNewness = (() => {\n        if (newness === \"all\") return true;\n        \n        const now = new Date();\n        const serviceDate = service.createdAt;\n        const monthsDiff = (now.getFullYear() - serviceDate.getFullYear()) * 12 + \n          (now.getMonth() - serviceDate.getMonth());\n        \n        switch (newness) {\n          case \"1month\": return monthsDiff <= 1;\n          case \"3months\": return monthsDiff <= 3;\n          case \"6months\": return monthsDiff <= 6;\n          default: return true;\n        }\n      })();\n\n      // Team size filter\n      const matchesTeamSize = teamSize.length === 0 || \n        teamSize.some(size => service.teamSize?.includes(size));\n\n      // Job title filter\n      const matchesJobTitle = !selectedJobTitle || \n        (service.jobTitles && service.jobTitles.includes(selectedJobTitle));\n\n      return matchesSearch && matchesCategory && matchesPrice && matchesRating && \n        matchesFeatures && matchesUseCases && matchesFreeTier && matchesPriceRange && \n        matchesNewness && matchesTeamSize && matchesJobTitle;\n    });\n\n    return filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'rating-desc':\n          return parseFloat(b.rating) - parseFloat(a.rating);\n        case 'rating-asc':\n          return parseFloat(a.rating) - parseFloat(b.rating);\n        case 'popularity':\n          return b.popularity - a.popularity;\n        case 'newest':\n          return b.createdAt.getTime() - a.createdAt.getTime();\n        case 'price-asc':\n        case 'price-desc': {\n          const getPrice = (price: string) => {\n            if (price === 'Free') return 0;\n            if (price === 'Freemium') return 1;\n            const match = price.match(/\\$(\\d+)/);\n            return match ? parseInt(match[1]) : 999;\n          };\n          const priceA = getPrice(a.price);\n          const priceB = getPrice(b.price);\n          return sortBy === 'price-asc' ? priceA - priceB : priceB - priceA;\n        }\n        default:\n          return 0;\n      }\n    });\n  }, [searchQuery, selectedCategory, priceFilters, rating, sortBy, features, useCases, \n    hasFreeTierOnly, priceRange, newness, teamSize, selectedJobTitle]);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-6 py-12 space-y-12\">\n        <div className=\"text-center space-y-6\">\n          <div className=\"space-y-3\">\n            <h1 className=\"text-5xl font-bold tracking-tight\" data-testid=\"text-page-title\">\n              AI for Business\n            </h1>\n            <p className=\"text-xl text-muted-foreground\" data-testid=\"text-page-subtitle\">\n              Find the perfect solution for your task\n            </p>\n          </div>\n\n          <div className=\"flex justify-center\">\n            <SearchBar \n              value={searchQuery} \n              onChange={setSearchQuery}\n              onSearch={handleSearch}\n            />\n          </div>\n\n          {!selectedJobTitle && (\n            <div className=\"flex justify-end\">\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-service-count\">\n                2,147 AI services\n              </p>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex gap-8\">\n          <aside className=\"flex-shrink-0\">\n            <FilterPanel\n              category={selectedCategory}\n              onCategoryChange={setSelectedCategory}\n              priceFilters={priceFilters}\n              onPriceFilterChange={handlePriceFilterChange}\n              rating={rating}\n              onRatingChange={setRating}\n              features={features}\n              onFeaturesChange={setFeatures}\n              useCases={useCases}\n              onUseCasesChange={setUseCases}\n              hasFreeTierOnly={hasFreeTierOnly}\n              onHasFreeTierChange={setHasFreeTierOnly}\n              priceRange={priceRange}\n              onPriceRangeChange={setPriceRange}\n              newness={newness}\n              onNewnessChange={setNewness}\n              teamSize={teamSize}\n              onTeamSizeChange={setTeamSize}\n              quickFilter={quickFilter}\n              onQuickFilterChange={handleQuickFilterChange}\n              onReset={handleReset}\n            />\n          </aside>\n\n          <main className=\"flex-1 space-y-6\">\n            {selectedJob && (\n              <Card className=\"p-6 space-y-4\">\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-3\">\n                      <h2 className=\"text-2xl font-bold\" data-testid=\"text-selected-job-title\">\n                        {selectedJob.title}\n                      </h2>\n                      <Badge \n                        variant=\"outline\" \n                        className={\n                          selectedJob.aiImpact >= 80 ? \"bg-red-500/10 text-red-500 border-red-500/20\" :\n                          selectedJob.aiImpact >= 60 ? \"bg-orange-500/10 text-orange-500 border-orange-500/20\" :\n                          selectedJob.aiImpact >= 40 ? \"bg-yellow-500/10 text-yellow-500 border-yellow-500/20\" :\n                          \"bg-green-500/10 text-green-500 border-green-500/20\"\n                        }\n                      >\n                        {selectedJob.aiImpact}% AI Impact\n                      </Badge>\n                    </div>\n                    <p className=\"text-muted-foreground\">{selectedJob.description}</p>\n                  </div>\n                  <Button\n                    onClick={clearJobFilter}\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    data-testid=\"button-clear-job-filter\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n\n                {selectedJob.tasks && selectedJob.tasks.length > 0 && (\n                  <div className=\"space-y-3\">\n                    <h3 className=\"font-semibold\">Professional Tasks:</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                      {selectedJob.tasks.map((task, index) => (\n                        <div \n                          key={index} \n                          className=\"flex items-start gap-2 text-sm\"\n                          data-testid={`text-job-task-${index}`}\n                        >\n                          <span className=\"text-primary mt-0.5\">•</span>\n                          <span className=\"text-muted-foreground\">{task}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"pt-2 border-t border-border\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Showing AI services recommended for <strong>{selectedJob.title}</strong> ({filteredAndSortedServices.length} services)\n                  </p>\n                </div>\n              </Card>\n            )}\n\n            <div className=\"flex items-center justify-between gap-4\">\n              <SortSelect value={sortBy} onChange={setSortBy} />\n              <div className=\"flex items-center gap-2\">\n                {comparing.size > 0 && (\n                  <Button\n                    onClick={handleCompare}\n                    variant=\"outline\"\n                    className=\"gap-2\"\n                    data-testid=\"button-compare-services\"\n                  >\n                    <GitCompare className=\"h-4 w-4\" />\n                    Compare ({comparing.size})\n                  </Button>\n                )}\n                <Button\n                  onClick={handleExport}\n                  variant=\"outline\"\n                  className=\"gap-2\"\n                  data-testid=\"button-export\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                  Export\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredAndSortedServices.map(service => (\n                <ServiceCard\n                  key={service.id}\n                  id={service.id}\n                  name={service.name}\n                  subtitle={service.subtitle}\n                  description={service.description}\n                  price={service.price}\n                  rating={service.rating}\n                  icon={service.icon}\n                  color={service.color}\n                  logoUrl={service.logoUrl}\n                  onFavoriteToggle={handleFavoriteToggle}\n                  onCompareToggle={handleCompareToggle}\n                  onClick={() => handleServiceClick(service.id)}\n                  isFavorite={favorites.has(service.id)}\n                  isComparing={comparing.has(service.id)}\n                />\n              ))}\n            </div>\n\n            {filteredAndSortedServices.length === 0 && (\n              <div className=\"text-center py-12\">\n                <p className=\"text-muted-foreground\">No services found matching your criteria</p>\n              </div>\n            )}\n\n            <div className=\"border-t border-border pt-6\">\n              <p className=\"text-sm text-muted-foreground text-center\" data-testid=\"text-results-count\">\n                Showing {filteredAndSortedServices.length} out of 2,147 services\n              </p>\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16629},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type AiService,\n  type InsertAiService,\n  type Favorite,\n  type InsertFavorite,\n  type ViewHistory,\n  type InsertViewHistory,\n  type Comparison,\n  type InsertComparison,\n  type Notification,\n  type InsertNotification,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  getAllServices(): Promise<AiService[]>;\n  getService(id: string): Promise<AiService | undefined>;\n  createService(service: InsertAiService): Promise<AiService>;\n\n  getFavorites(userId: string): Promise<Favorite[]>;\n  addFavorite(favorite: InsertFavorite): Promise<Favorite>;\n  removeFavorite(userId: string, serviceId: string): Promise<void>;\n\n  getViewHistory(userId: string): Promise<ViewHistory[]>;\n  addViewHistory(viewHistory: InsertViewHistory): Promise<ViewHistory>;\n\n  getComparisons(userId: string): Promise<Comparison[]>;\n  saveComparison(comparison: InsertComparison): Promise<Comparison>;\n\n  getNotifications(userId: string): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private services: Map<string, AiService>;\n  private favorites: Map<string, Favorite>;\n  private viewHistory: Map<string, ViewHistory>;\n  private comparisons: Map<string, Comparison>;\n  private notifications: Map<string, Notification>;\n\n  constructor() {\n    this.users = new Map();\n    this.services = new Map();\n    this.favorites = new Map();\n    this.viewHistory = new Map();\n    this.comparisons = new Map();\n    this.notifications = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getAllServices(): Promise<AiService[]> {\n    return Array.from(this.services.values());\n  }\n\n  async getService(id: string): Promise<AiService | undefined> {\n    return this.services.get(id);\n  }\n\n  async createService(insertService: InsertAiService): Promise<AiService> {\n    const id = randomUUID();\n    const service: AiService = {\n      ...insertService,\n      id,\n      website: insertService.website ?? null,\n      popularity: insertService.popularity ?? 0,\n      createdAt: new Date(),\n    };\n    this.services.set(id, service);\n    return service;\n  }\n\n  async getFavorites(userId: string): Promise<Favorite[]> {\n    return Array.from(this.favorites.values()).filter(\n      (fav) => fav.userId === userId,\n    );\n  }\n\n  async addFavorite(insertFavorite: InsertFavorite): Promise<Favorite> {\n    const id = randomUUID();\n    const favorite: Favorite = {\n      ...insertFavorite,\n      id,\n      createdAt: new Date(),\n    };\n    this.favorites.set(id, favorite);\n    return favorite;\n  }\n\n  async removeFavorite(userId: string, serviceId: string): Promise<void> {\n    const favorite = Array.from(this.favorites.values()).find(\n      (fav) => fav.userId === userId && fav.serviceId === serviceId,\n    );\n    if (favorite) {\n      this.favorites.delete(favorite.id);\n    }\n  }\n\n  async getViewHistory(userId: string): Promise<ViewHistory[]> {\n    return Array.from(this.viewHistory.values())\n      .filter((view) => view.userId === userId)\n      .sort((a, b) => b.viewedAt.getTime() - a.viewedAt.getTime());\n  }\n\n  async addViewHistory(insertViewHistory: InsertViewHistory): Promise<ViewHistory> {\n    const id = randomUUID();\n    const viewHistory: ViewHistory = {\n      ...insertViewHistory,\n      id,\n      viewedAt: new Date(),\n    };\n    this.viewHistory.set(id, viewHistory);\n    return viewHistory;\n  }\n\n  async getComparisons(userId: string): Promise<Comparison[]> {\n    return Array.from(this.comparisons.values()).filter(\n      (comp) => comp.userId === userId,\n    );\n  }\n\n  async saveComparison(insertComparison: InsertComparison): Promise<Comparison> {\n    const id = randomUUID();\n    const comparison: Comparison = {\n      ...insertComparison,\n      id,\n      createdAt: new Date(),\n    };\n    this.comparisons.set(id, comparison);\n    return comparison;\n  }\n\n  async getNotifications(userId: string): Promise<Notification[]> {\n    return Array.from(this.notifications.values())\n      .filter((notif) => notif.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const id = randomUUID();\n    const notification: Notification = {\n      ...insertNotification,\n      id,\n      category: insertNotification.category ?? null,\n      isRead: insertNotification.isRead ?? false,\n      createdAt: new Date(),\n    };\n    this.notifications.set(id, notification);\n    return notification;\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    const notification = this.notifications.get(id);\n    if (notification) {\n      notification.isRead = true;\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":5485},"client/src/components/examples/FilterPanel.tsx":{"content":"import { useState } from \"react\";\nimport FilterPanel from \"../FilterPanel\";\n\nexport default function FilterPanelExample() {\n  const [category, setCategory] = useState(\"all\");\n  const [priceFilters, setPriceFilters] = useState({\n    free: false,\n    freemium: true,\n    paid: false,\n  });\n  const [rating, setRating] = useState(\"\");\n\n  const handlePriceFilterChange = (filter: 'free' | 'freemium' | 'paid') => {\n    setPriceFilters(prev => ({ ...prev, [filter]: !prev[filter] }));\n  };\n\n  const handleReset = () => {\n    setCategory(\"all\");\n    setPriceFilters({ free: false, freemium: false, paid: false });\n    setRating(\"\");\n  };\n\n  return (\n    <FilterPanel\n      category={category}\n      onCategoryChange={setCategory}\n      priceFilters={priceFilters}\n      onPriceFilterChange={handlePriceFilterChange}\n      rating={rating}\n      onRatingChange={setRating}\n      onReset={handleReset}\n    />\n  );\n}\n","size_bytes":907},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AppProvider, useApp } from \"@/context/AppContext\";\nimport Navbar from \"@/components/Navbar\";\nimport Home from \"@/pages/Home\";\nimport Favorites from \"@/pages/Favorites\";\nimport Compare from \"@/pages/Compare\";\nimport History from \"@/pages/History\";\nimport Notifications from \"@/pages/Notifications\";\nimport ServiceDetail from \"@/pages/ServiceDetail\";\nimport CostCalculator from \"@/pages/CostCalculator\";\nimport UseCases from \"@/pages/UseCases\";\nimport JobImpact from \"@/pages/JobImpact\";\nimport Account from \"@/pages/Account\";\nimport Finances from \"@/pages/Finances\";\nimport Cart from \"@/pages/Cart\";\nimport NotFound from \"@/pages/not-found\";\nimport { useState, useEffect } from \"react\";\nimport { getCartFromStorage } from \"@/lib/cartData\";\n\nfunction Router() {\n  const { favorites, comparing, unreadNotificationsCount } = useApp();\n  const [cartCount, setCartCount] = useState(0);\n\n  useEffect(() => {\n    const updateCartCount = () => {\n      setCartCount(getCartFromStorage().length);\n    };\n    \n    updateCartCount();\n    \n    window.addEventListener(\"storage\", updateCartCount);\n    const interval = setInterval(updateCartCount, 1000);\n    \n    return () => {\n      window.removeEventListener(\"storage\", updateCartCount);\n      clearInterval(interval);\n    };\n  }, []);\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navbar\n        favoritesCount={favorites.size}\n        comparingCount={comparing.size}\n        notificationsCount={unreadNotificationsCount}\n        cartCount={cartCount}\n      />\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/favorites\" component={Favorites} />\n        <Route path=\"/compare\" component={Compare} />\n        <Route path=\"/history\" component={History} />\n        <Route path=\"/notifications\" component={Notifications} />\n        <Route path=\"/calculator\" component={CostCalculator} />\n        <Route path=\"/use-cases\" component={UseCases} />\n        <Route path=\"/job-impact\" component={JobImpact} />\n        <Route path=\"/account\" component={Account} />\n        <Route path=\"/finances\" component={Finances} />\n        <Route path=\"/cart\" component={Cart} />\n        <Route path=\"/service/:id\" component={ServiceDetail} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AppProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AppProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2811},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ServiceCard.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Star, Heart, GitCompare, ShoppingCart } from \"lucide-react\";\nimport { formatPrice } from \"@/lib/utils\";\nimport { useState } from \"react\";\nimport { MOCK_SERVICES } from \"@/lib/mockData\";\nimport { addToCart } from \"@/lib/cartData\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ServiceCardProps {\n  id: string;\n  name: string;\n  subtitle: string;\n  description: string;\n  price: string;\n  rating: string;\n  icon: string;\n  color: string;\n  logoUrl?: string;\n  onFavoriteToggle?: (serviceId: string, isFavorite: boolean) => void;\n  onCompareToggle?: (serviceId: string, isComparing: boolean) => void;\n  onClick?: () => void;\n  isFavorite?: boolean;\n  isComparing?: boolean;\n}\n\nexport default function ServiceCard({\n  id,\n  name,\n  subtitle,\n  description,\n  price,\n  rating,\n  icon,\n  color,\n  logoUrl,\n  onFavoriteToggle,\n  onCompareToggle,\n  onClick,\n  isFavorite = false,\n  isComparing = false,\n}: ServiceCardProps) {\n  const [favorite, setFavorite] = useState(isFavorite);\n  const [comparing, setComparing] = useState(isComparing);\n  const { toast } = useToast();\n\n  const handleFavoriteClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const newFavorite = !favorite;\n    setFavorite(newFavorite);\n    onFavoriteToggle?.(id, newFavorite);\n  };\n\n  const handleCompareClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const newComparing = !comparing;\n    setComparing(newComparing);\n    onCompareToggle?.(id, newComparing);\n  };\n\n  const handleAddToCart = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const service = MOCK_SERVICES.find(s => s.id === id);\n    if (!service) return;\n\n    const defaultPlanIndex = Math.floor(service.pricingTiers.length / 2);\n    const defaultPlan = service.pricingTiers[defaultPlanIndex];\n    const priceValue = parseFloat(defaultPlan.price.replace(/[^0-9.]/g, '')) || 0;\n\n    addToCart({\n      serviceId: id,\n      serviceName: name,\n      serviceLogoUrl: logoUrl,\n      serviceColor: color,\n      planIndex: defaultPlanIndex,\n      planName: defaultPlan.name,\n      price: priceValue,\n      billingCycle: \"monthly\",\n    });\n\n    toast({\n      title: \"Добавлено в корзину\",\n      description: `${name} - ${defaultPlan.name}`,\n    });\n  };\n\n  return (\n    <Card \n      className=\"hover-elevate transition-all duration-200 cursor-pointer\" \n      onClick={onClick}\n      data-testid={`card-service-${name.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      <CardHeader className=\"space-y-3 pb-3\">\n        <div className=\"flex items-start justify-between gap-3\">\n          <div \n            className=\"flex items-center justify-center h-12 w-12 rounded-md overflow-hidden flex-shrink-0\"\n            style={{ backgroundColor: logoUrl ? '#ffffff' : color }}\n          >\n            {logoUrl ? (\n              <img \n                src={logoUrl} \n                alt={`${name} logo`} \n                className=\"h-8 w-8 object-contain\"\n                onError={(e) => {\n                  const target = e.target as HTMLImageElement;\n                  target.style.display = 'none';\n                  const parent = target.parentElement;\n                  if (parent) {\n                    parent.style.backgroundColor = color;\n                    parent.innerHTML = `<span class=\"text-2xl font-bold text-white\">${name.charAt(0)}</span>`;\n                  }\n                }}\n              />\n            ) : (\n              <span className=\"text-2xl font-bold text-white\">{name.charAt(0)}</span>\n            )}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"secondary\" className=\"text-xs\" data-testid={`badge-price-${name.toLowerCase().replace(/\\s+/g, '-')}`}>\n              {formatPrice(price)}\n            </Badge>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={handleFavoriteClick}\n              className={favorite ? \"text-red-500\" : \"\"}\n              data-testid={`button-favorite-${id}`}\n            >\n              <Heart className={`h-4 w-4 ${favorite ? 'fill-current' : ''}`} />\n            </Button>\n          </div>\n        </div>\n        <div className=\"space-y-1\">\n          <h3 className=\"font-semibold text-base leading-tight\" data-testid={`text-service-name-${name.toLowerCase().replace(/\\s+/g, '-')}`}>\n            {name}\n          </h3>\n          <p className=\"text-sm text-muted-foreground\">{subtitle}</p>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <p className=\"text-sm text-muted-foreground leading-relaxed\">{description}</p>\n        <div className=\"flex items-center justify-between gap-2\">\n          <div className=\"flex items-center gap-1 text-sm\">\n            <Star className=\"h-4 w-4 fill-yellow-500 text-yellow-500\" />\n            <span className=\"font-medium\" data-testid={`text-rating-${name.toLowerCase().replace(/\\s+/g, '-')}`}>{rating}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              size=\"sm\"\n              variant={comparing ? \"default\" : \"outline\"}\n              onClick={handleCompareClick}\n              data-testid={`button-compare-${id}`}\n            >\n              <GitCompare className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"default\"\n              onClick={handleAddToCart}\n              className=\"gap-2\"\n              data-testid={`button-add-to-cart-${id}`}\n            >\n              <ShoppingCart className=\"h-4 w-4\" />\n              В корзину\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5906},"client/src/pages/CostCalculator.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MOCK_SERVICES } from \"@/lib/mockData\";\nimport { Plus, Minus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { formatPrice } from \"@/lib/utils\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\n\nexport default function CostCalculator() {\n  const [teamSize, setTeamSize] = useState(1);\n  const [selectedServices, setSelectedServices] = useState<Record<string, number>>({});\n\n  const handleServiceQuantityChange = (serviceId: string, delta: number) => {\n    setSelectedServices(prev => {\n      const current = prev[serviceId] || 0;\n      const newValue = Math.max(0, current + delta);\n      \n      if (newValue === 0) {\n        const { [serviceId]: removed, ...rest } = prev;\n        return rest;\n      }\n      \n      return { ...prev, [serviceId]: newValue };\n    });\n  };\n\n  const getPricePerUser = (price: string): number => {\n    if (price === 'Free') return 0;\n    if (price === 'Freemium') return 0;\n    const cleanPrice = price.replace('From ', '');\n    const match = cleanPrice.match(/\\$(\\d+)/);\n    return match ? parseInt(match[1]) : 0;\n  };\n\n  const calculateTotal = () => {\n    return Object.entries(selectedServices).reduce((total, [serviceId, quantity]) => {\n      const service = MOCK_SERVICES.find(s => s.id === serviceId);\n      if (!service) return total;\n      \n      const pricePerUser = getPricePerUser(service.price);\n      return total + (pricePerUser * quantity * teamSize);\n    }, 0);\n  };\n\n  const totalCost = calculateTotal();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-6\">\n        <Breadcrumb data-testid=\"breadcrumb-calculator\">\n          <BreadcrumbList>\n            <BreadcrumbItem>\n              <BreadcrumbLink asChild>\n                <Link href=\"/\" data-testid=\"link-breadcrumb-home\">Home</Link>\n              </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n            <BreadcrumbItem>\n              <BreadcrumbPage data-testid=\"text-breadcrumb-calculator\">Cost Calculator</BreadcrumbPage>\n            </BreadcrumbItem>\n          </BreadcrumbList>\n        </Breadcrumb>\n\n        <div>\n          <h1 className=\"text-4xl font-bold tracking-tight\" data-testid=\"text-calculator-title\">\n            Cost Calculator\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Estimate your team's monthly AI tools budget\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Card>\n              <CardHeader>\n                <h2 className=\"text-xl font-semibold\">Team Configuration</h2>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"team-size\">Team Size</Label>\n                  <Input\n                    id=\"team-size\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={teamSize}\n                    onChange={(e) => setTeamSize(Math.max(1, parseInt(e.target.value) || 1))}\n                    data-testid=\"input-team-size\"\n                  />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Number of team members who will use these tools\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <h2 className=\"text-xl font-semibold\">Select Services</h2>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {MOCK_SERVICES.map(service => {\n                    const quantity = selectedServices[service.id] || 0;\n                    const pricePerUser = getPricePerUser(service.price);\n                    \n                    return (\n                      <div\n                        key={service.id}\n                        className=\"flex items-center justify-between p-4 border border-border rounded-md hover-elevate\"\n                        data-testid={`service-item-${service.id}`}\n                      >\n                        <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                          <div\n                            className=\"flex items-center justify-center h-10 w-10 rounded-md text-xl flex-shrink-0\"\n                            style={{ backgroundColor: service.color }}\n                          >\n                            {service.icon}\n                          </div>\n                          <div className=\"min-w-0 flex-1\">\n                            <h3 className=\"font-semibold text-sm\">{service.name}</h3>\n                            <div className=\"flex items-center gap-2 mt-1\">\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {formatPrice(service.price)}\n                              </Badge>\n                              {pricePerUser > 0 && (\n                                <span className=\"text-xs text-muted-foreground\">\n                                  ${pricePerUser}/user/mo\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center gap-2\">\n                          <Button\n                            size=\"icon\"\n                            variant=\"outline\"\n                            onClick={() => handleServiceQuantityChange(service.id, -1)}\n                            disabled={quantity === 0}\n                            data-testid={`button-decrease-${service.id}`}\n                          >\n                            <Minus className=\"h-4 w-4\" />\n                          </Button>\n                          <span className=\"w-8 text-center font-medium\">{quantity}</span>\n                          <Button\n                            size=\"icon\"\n                            variant=\"outline\"\n                            onClick={() => handleServiceQuantityChange(service.id, 1)}\n                            data-testid={`button-increase-${service.id}`}\n                          >\n                            <Plus className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-24\">\n              <CardHeader>\n                <h2 className=\"text-xl font-semibold\">Cost Summary</h2>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Team Size</span>\n                    <span className=\"font-medium\">{teamSize}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Services Selected</span>\n                    <span className=\"font-medium\">\n                      {Object.keys(selectedServices).length}\n                    </span>\n                  </div>\n                </div>\n\n                {Object.keys(selectedServices).length > 0 && (\n                  <>\n                    <div className=\"border-t border-border pt-4 space-y-2\">\n                      {Object.entries(selectedServices).map(([serviceId, quantity]) => {\n                        const service = MOCK_SERVICES.find(s => s.id === serviceId);\n                        if (!service) return null;\n                        \n                        const pricePerUser = getPricePerUser(service.price);\n                        const serviceCost = pricePerUser * quantity * teamSize;\n                        \n                        return (\n                          <div key={serviceId} className=\"flex justify-between text-sm\">\n                            <span className=\"text-muted-foreground truncate mr-2\">\n                              {service.name} × {quantity}\n                            </span>\n                            <span className=\"font-medium whitespace-nowrap\">\n                              ${serviceCost}/mo\n                            </span>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </>\n                )}\n\n                <div className=\"border-t border-border pt-4\">\n                  <div className=\"flex justify-between items-baseline\">\n                    <span className=\"text-lg font-semibold\">Total</span>\n                    <div className=\"text-right\">\n                      <p className=\"text-3xl font-bold\" data-testid=\"text-total-cost\">\n                        ${totalCost}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">per month</p>\n                    </div>\n                  </div>\n                </div>\n\n                {totalCost > 0 && (\n                  <div className=\"bg-muted/50 rounded-md p-3 text-sm text-muted-foreground\">\n                    <p>Annual cost: <strong className=\"text-foreground\">${totalCost * 12}</strong></p>\n                    <p className=\"mt-1\">Per user/month: <strong className=\"text-foreground\">${(totalCost / teamSize).toFixed(2)}</strong></p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10095},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatPrice(price: string): string {\n  if (!price) return price;\n  \n  const lowerPrice = price.toLowerCase();\n  \n  if (lowerPrice === \"free\" || lowerPrice === \"freemium\" || lowerPrice === \"custom\") {\n    return price;\n  }\n  \n  if (price.startsWith(\"$\")) {\n    return `From ${price}`;\n  }\n  \n  return price;\n}\n","size_bytes":492},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"design_guidelines.md":{"content":"# Design Guidelines: AI for Business Platform\n\n## User-Specified Requirements\n\n### Layout Structure\n\n**Header Section:**\n- Large title \"AI for Business\" \n- Subtitle: \"Find the perfect solution for your task\"\n- Large search bar with placeholder \"Search the catalog…\"\n- \"AI Search\" button positioned on the right of search bar\n- Service counter in upper-right corner: \"2,147 AI services\"\n\n**Left Sidebar - Filter Panel:**\n- **Category Section:** Dropdown menu with \"All categories\" option\n- **Price Section:** Checkboxes for Free, Freemium (pre-checked), and Paid\n- **Rating Section:** Three options with star icons - 5.0, 4.0+, 3.0+\n- Reset button at bottom of filter panel\n\n**Main Content Area:**\n- Grid layout: 3 columns × 2 rows of AI service cards\n- Each card contains:\n  - Colorful icon\n  - Service name and subtitle (e.g., \"Jasper AI — AI Copywriting\")\n  - Short description\n  - Pricing tag (Freemium/Free/Paid)\n  - Star rating with numeric value\n\n**Required Service Cards:**\n1. Jasper AI — AI Copywriting — ⭐ 4.8\n2. Canva AI — Design & Visuals — ⭐ 4.9\n3. Copy.ai — Marketing Texts — ⭐ 4.7\n4. Grammarly — Text Checking — ⭐ 4.6\n5. ChatGPT Plus — Universal AI — ⭐ 4.9 ($20/month)\n6. Buffer AI — Social Media — ⭐ 4.5\n\n**Footer:**\n- Display line: \"Showing 6 out of 2,147 services\"\n\n### Visual Design Specifications\n\n**Color Scheme:**\n- Dark, elegant interface with black/gray background\n- Bright accent colors for icons and category tags\n- High contrast for readability\n\n**Typography:**\n- Font family: Inter or Roboto\n- Clean, modern typographic hierarchy\n\n**UI Elements:**\n- Smooth rounded corners throughout\n- Soft drop shadows for depth\n- Balanced spacing and alignment\n- Professional SaaS dashboard aesthetic\n\n### Functional Requirements\n- Search functionality filtering by name and description\n- Interactive filter system updating grid in real-time\n- Reset functionality to clear all filters\n- Responsive grid layout maintaining 3-column structure","size_bytes":1994},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ServiceCardActions.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Heart, GitCompare } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface ServiceCardActionsProps {\n  serviceId: string;\n  serviceName: string;\n  onFavoriteToggle?: (serviceId: string, isFavorite: boolean) => void;\n  onCompareToggle?: (serviceId: string, isComparing: boolean) => void;\n  initialFavorite?: boolean;\n  initialComparing?: boolean;\n}\n\nexport default function ServiceCardActions({\n  serviceId,\n  serviceName,\n  onFavoriteToggle,\n  onCompareToggle,\n  initialFavorite = false,\n  initialComparing = false,\n}: ServiceCardActionsProps) {\n  const [isFavorite, setIsFavorite] = useState(initialFavorite);\n  const [isComparing, setIsComparing] = useState(initialComparing);\n\n  const handleFavoriteClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const newFavorite = !isFavorite;\n    setIsFavorite(newFavorite);\n    onFavoriteToggle?.(serviceId, newFavorite);\n    console.log(`${serviceName} ${newFavorite ? 'added to' : 'removed from'} favorites`);\n  };\n\n  const handleCompareClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const newComparing = !isComparing;\n    setIsComparing(newComparing);\n    onCompareToggle?.(serviceId, newComparing);\n    console.log(`${serviceName} ${newComparing ? 'added to' : 'removed from'} comparison`);\n  };\n\n  return (\n    <div className=\"flex gap-2\">\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleFavoriteClick}\n        className={isFavorite ? \"text-red-500\" : \"\"}\n        data-testid={`button-favorite-${serviceId}`}\n      >\n        <Heart className={`h-4 w-4 ${isFavorite ? 'fill-current' : ''}`} />\n      </Button>\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleCompareClick}\n        className={isComparing ? \"text-primary\" : \"\"}\n        data-testid={`button-compare-${serviceId}`}\n      >\n        <GitCompare className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n}\n","size_bytes":2024},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/pages/Favorites.tsx":{"content":"import { useLocation, Link } from \"wouter\";\nimport ServiceCard from \"@/components/ServiceCard\";\nimport { MOCK_SERVICES } from \"@/lib/mockData\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, Trash2 } from \"lucide-react\";\nimport { useApp } from \"@/context/AppContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\n\nexport default function Favorites() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { favorites, comparing, toggleFavorite, toggleCompare, clearFavorites, addToHistory } = useApp();\n\n  const handleFavoriteToggle = (serviceId: string, isFavorite: boolean) => {\n    toggleFavorite(serviceId);\n  };\n\n  const handleCompareToggle = (serviceId: string, isComparing: boolean) => {\n    const success = toggleCompare(serviceId);\n    if (!success) {\n      toast({\n        title: \"Comparison limit reached\",\n        description: \"You can compare up to 4 services at once\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleClearAll = () => {\n    if (confirm('Are you sure you want to remove all favorites?')) {\n      clearFavorites();\n    }\n  };\n\n  const handleExport = () => {\n    const favoriteServices = MOCK_SERVICES.filter(s => favorites.has(s.id));\n    const data = favoriteServices.map(s => ({\n      name: s.name,\n      subtitle: s.subtitle,\n      category: s.category,\n      price: s.price,\n      rating: s.rating,\n      website: s.website || '',\n    }));\n    \n    import('@/lib/exportUtils').then(({ exportToCSV }) => {\n      exportToCSV(data, 'my-favorites');\n    });\n  };\n\n  const handleServiceClick = (serviceId: string) => {\n    addToHistory(serviceId);\n    setLocation(`/service/${serviceId}`);\n  };\n\n  const favoriteServices = MOCK_SERVICES.filter(service => favorites.has(service.id));\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-6\">\n        <Breadcrumb data-testid=\"breadcrumb-favorites\">\n          <BreadcrumbList>\n            <BreadcrumbItem>\n              <BreadcrumbLink asChild>\n                <Link href=\"/\" data-testid=\"link-breadcrumb-home\">Home</Link>\n              </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n            <BreadcrumbItem>\n              <BreadcrumbPage data-testid=\"text-breadcrumb-favorites\">Favorites</BreadcrumbPage>\n            </BreadcrumbItem>\n          </BreadcrumbList>\n        </Breadcrumb>\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold tracking-tight\" data-testid=\"text-favorites-title\">\n              My Favorites\n            </h1>\n            <p className=\"text-muted-foreground mt-2\" data-testid=\"text-favorites-count\">\n              {favoriteServices.length} saved service{favoriteServices.length !== 1 ? 's' : ''}\n            </p>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button\n              onClick={handleExport}\n              variant=\"outline\"\n              className=\"gap-2\"\n              disabled={favoriteServices.length === 0}\n              data-testid=\"button-export-favorites\"\n            >\n              <Download className=\"h-4 w-4\" />\n              Export\n            </Button>\n            <Button\n              onClick={handleClearAll}\n              variant=\"outline\"\n              className=\"gap-2\"\n              disabled={favoriteServices.length === 0}\n              data-testid=\"button-clear-favorites\"\n            >\n              <Trash2 className=\"h-4 w-4\" />\n              Clear All\n            </Button>\n          </div>\n        </div>\n\n        {favoriteServices.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {favoriteServices.map(service => (\n              <ServiceCard\n                key={service.id}\n                id={service.id}\n                name={service.name}\n                subtitle={service.subtitle}\n                description={service.description}\n                price={service.price}\n                rating={service.rating}\n                icon={service.icon}\n                color={service.color}\n                logoUrl={service.logoUrl}\n                onFavoriteToggle={handleFavoriteToggle}\n                onCompareToggle={handleCompareToggle}\n                onClick={() => handleServiceClick(service.id)}\n                isFavorite={favorites.has(service.id)}\n                isComparing={comparing.has(service.id)}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-24\">\n            <p className=\"text-xl text-muted-foreground mb-4\">No favorites yet</p>\n            <p className=\"text-sm text-muted-foreground\">\n              Start adding services to your favorites to see them here\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5050},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"replit.md":{"content":"# AI for Business Platform\n\n## Overview\n\nThis full-stack web application enables businesses to discover, compare, and manage AI services. It offers features for browsing, searching, filtering, and comparing various AI tools across categories like copywriting, design, marketing, and text processing. Users can save favorites, track viewing history, manage notifications, calculate costs, and explore industry-specific use cases. The platform also includes comprehensive features for managing service purchases, subscriptions, and financial transactions through a multi-entity payer system.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend\n\nThe frontend is a React 18 SPA with TypeScript, built using Vite. It utilizes Wouter for routing and shadcn/ui (Radix UI + Tailwind CSS) for a consistent \"New York\" style UI with dark mode support. State management relies on React Context for global state, TanStack Query for server state, and localStorage for client-side persistence of user data (favorites, comparisons, history, cart, purchases, payers, transactions). Styling is managed with Tailwind CSS and custom CSS variables.\n\n### Backend\n\nThe backend is an Express.js server developed with TypeScript, running with `tsx` for hot reloading in development and `esbuild` for production. It exposes a RESTful API with JSON communication and includes custom middleware for logging and error handling.\n\n### Data Storage\n\nThe application uses PostgreSQL via Neon serverless driver and Drizzle ORM for type-safe database interactions. Key data models include:\n- **AI Services**: Comprehensive catalog with categories, pricing, features, and supported job titles.\n- **Jobs (Professions)**: Definitions of professions, their AI impact, and associated tasks.\n- **Users, Favorites, View History, Comparisons, Notifications**: Standard user-centric data.\n- **Payers**: Multi-entity financial accounts (companies/individuals) with balance tracking.\n- **Transactions**: Financial operations (deposit, withdrawal, purchase).\n- **Purchases**: Service subscriptions linked to payers with billing cycles and status.\n\n### Key Components & Features\n\n- **Service Catalog**: Browsing, advanced filtering (features, use cases, free tier, price range, newness, team size), sorting, and AI-powered search (future).\n- **Purchase Flow**: A 3-4 step modal for purchasing services, including plan selection, payer integration with real-time balance validation, credential management, and payment screen (for individual payers only). When individual payer selected, displays payment screen with top-up options (500₽-10000₽ quick select), 4 payment methods (Банковские карты, ЮMoney, СБП, SberPay - UI only), and \"Списать с баланса\" button. Company payers skip payment screen. Success screen displays \"Спасибо за ваш заказ!\" with 1-7 day processing time notification. It records transactions and links purchases to payers.\n- **Shopping Cart System**: Frontend-only cart with credential input fields for each service, payer selection, balance validation, and dedicated success screen showing order summary with 1-7 day processing time notification.\n- **Account Management**: A personal cabinet with tabs for an enhanced dashboard overview (active services, monthly cost, upcoming payments), \"My Services\" (active subscriptions, credentials), purchase history, and settings.\n- **Job Impact Index**: Analyzes AI's impact on 20 professions, allowing users to filter services by profession and view profession-specific tasks.\n- **Finances/Payer Management**: A multi-entity payer system (companies/individuals) with payer creation, balance management (top-up/withdraw), service tracking per payer, and a complete transaction history.\n- **User Engagement**: Favorites, service comparison (up to 4 services), viewing history, notification system, and cost calculator.\n- **UI/UX**: Consistent card-based layouts, badge variants, icon-driven navigation, and breadcrumb navigation across all pages. Dark mode is default with HSL-based color system.\n\n## External Dependencies\n\n### UI & Component Libraries\n\n- **shadcn/ui**: Component library based on Radix UI primitives and Tailwind CSS.\n- **Lucide React**: Iconography.\n- **cmdk**: Command palette.\n- **embla-carousel-react**: Carousel functionality.\n- **vaul**: Drawer components.\n- **react-day-picker**: Calendar/date selection.\n\n### Form & Validation\n\n- **React Hook Form**: Form state management.\n- **Zod**: Runtime type validation and schema definition.\n\n### Utilities\n\n- **class-variance-authority (cva)**: Variant-based styling.\n- **clsx + tailwind-merge**: Conditional class composition.\n- **date-fns**: Date manipulation and formatting.\n- **nanoid**: Unique ID generation.\n\n### Database & ORM\n\n- **@neondatabase/serverless**: PostgreSQL connectivity.\n- **drizzle-orm**: TypeScript-first ORM.\n- **drizzle-zod**: Automatic Zod schema generation from database schema.\n\n### Development Tools\n\n- **drizzle-kit**: Database migrations and schema management.\n- **@replit/* plugins**: Enhanced Replit development experience.\n- **esbuild**: Production bundling.","size_bytes":5193},"client/src/pages/Notifications.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, Check, Trash2 } from \"lucide-react\";\nimport { useApp } from \"@/context/AppContext\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\n\nexport default function Notifications() {\n  const { \n    notifications, \n    markNotificationAsRead, \n    markAllNotificationsAsRead,\n    deleteNotification,\n    clearAllNotifications,\n    unreadNotificationsCount \n  } = useApp();\n\n  const handleMarkAsRead = (id: string) => {\n    markNotificationAsRead(id);\n  };\n\n  const handleMarkAllAsRead = () => {\n    markAllNotificationsAsRead();\n  };\n\n  const handleDelete = (id: string) => {\n    deleteNotification(id);\n  };\n\n  const handleClearAll = () => {\n    if (confirm('Are you sure you want to delete all notifications?')) {\n      clearAllNotifications();\n    }\n  };\n\n  const formatTime = (date: Date) => {\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (days > 0) return `${days}d ago`;\n    if (hours > 0) return `${hours}h ago`;\n    if (minutes > 0) return `${minutes}m ago`;\n    return 'Just now';\n  };\n\n  const unreadCount = unreadNotificationsCount;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-4xl mx-auto px-6 py-8 space-y-6\">\n        <Breadcrumb data-testid=\"breadcrumb-notifications\">\n          <BreadcrumbList>\n            <BreadcrumbItem>\n              <BreadcrumbLink asChild>\n                <Link href=\"/\" data-testid=\"link-breadcrumb-home\">Home</Link>\n              </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n            <BreadcrumbItem>\n              <BreadcrumbPage data-testid=\"text-breadcrumb-notifications\">Notifications</BreadcrumbPage>\n            </BreadcrumbItem>\n          </BreadcrumbList>\n        </Breadcrumb>\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold tracking-tight flex items-center gap-3\" data-testid=\"text-notifications-title\">\n              Notifications\n              {unreadCount > 0 && (\n                <Badge variant=\"destructive\">{unreadCount}</Badge>\n              )}\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Stay updated with the latest AI services and changes\n            </p>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            {unreadCount > 0 && (\n              <Button\n                onClick={handleMarkAllAsRead}\n                variant=\"outline\"\n                className=\"gap-2\"\n                data-testid=\"button-mark-all-read\"\n              >\n                <Check className=\"h-4 w-4\" />\n                Mark all as read\n              </Button>\n            )}\n            <Button\n              onClick={handleClearAll}\n              variant=\"outline\"\n              className=\"gap-2\"\n              disabled={notifications.length === 0}\n              data-testid=\"button-clear-notifications\"\n            >\n              <Trash2 className=\"h-4 w-4\" />\n              Clear all\n            </Button>\n          </div>\n        </div>\n\n        {notifications.length > 0 ? (\n          <div className=\"space-y-3\">\n            {notifications.map(notification => (\n              <Card\n                key={notification.id}\n                className={`transition-colors ${!notification.isRead ? 'bg-accent/20 border-accent' : ''}`}\n                data-testid={`notification-${notification.id}`}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className={`mt-1 ${notification.isRead ? 'text-muted-foreground' : 'text-primary'}`}>\n                      <Bell className=\"h-5 w-5\" />\n                    </div>\n\n                    <div className=\"flex-1 min-w-0\">\n                      <p className={`text-sm ${!notification.isRead ? 'font-medium' : 'text-muted-foreground'}`}>\n                        {notification.message}\n                      </p>\n                      <div className=\"flex items-center gap-2 mt-2\">\n                        <Badge variant=\"secondary\" className=\"text-xs capitalize\">\n                          {notification.category}\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {formatTime(notification.createdAt)}\n                        </span>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-1 flex-shrink-0\">\n                      {!notification.isRead && (\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          onClick={() => handleMarkAsRead(notification.id)}\n                          data-testid={`button-mark-read-${notification.id}`}\n                        >\n                          <Check className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => handleDelete(notification.id)}\n                        data-testid={`button-delete-${notification.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-24\">\n            <Bell className=\"h-16 w-16 text-muted-foreground mx-auto mb-4 opacity-20\" />\n            <p className=\"text-xl text-muted-foreground mb-2\">No notifications</p>\n            <p className=\"text-sm text-muted-foreground\">\n              You're all caught up!\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6281},"client/src/context/AppContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\n\ninterface Notification {\n  id: string;\n  message: string;\n  category: string;\n  isRead: boolean;\n  createdAt: Date;\n}\n\ninterface AppContextType {\n  favorites: Set<string>;\n  comparing: Set<string>;\n  history: string[];\n  notifications: Notification[];\n  selectedCategory: string;\n  addFavorite: (id: string) => void;\n  removeFavorite: (id: string) => void;\n  toggleFavorite: (id: string) => void;\n  clearFavorites: () => void;\n  addToCompare: (id: string) => boolean;\n  removeFromCompare: (id: string) => void;\n  toggleCompare: (id: string) => boolean;\n  clearCompare: () => void;\n  addToHistory: (id: string) => void;\n  clearHistory: () => void;\n  markNotificationAsRead: (id: string) => void;\n  markAllNotificationsAsRead: () => void;\n  deleteNotification: (id: string) => void;\n  clearAllNotifications: () => void;\n  unreadNotificationsCount: number;\n  setSelectedCategory: (category: string) => void;\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\nexport function AppProvider({ children }: { children: ReactNode }) {\n  const [favorites, setFavorites] = useState<Set<string>>(() => {\n    const saved = localStorage.getItem('favorites');\n    return saved ? new Set(JSON.parse(saved)) : new Set();\n  });\n\n  const [comparing, setComparing] = useState<Set<string>>(() => {\n    const saved = localStorage.getItem('comparing');\n    return saved ? new Set(JSON.parse(saved)) : new Set();\n  });\n\n  const [history, setHistory] = useState<string[]>(() => {\n    const saved = localStorage.getItem('history');\n    return saved ? JSON.parse(saved) : [];\n  });\n\n  const [notifications, setNotifications] = useState<Notification[]>(() => {\n    const saved = localStorage.getItem('notifications');\n    if (saved) {\n      return JSON.parse(saved).map((n: any) => ({\n        ...n,\n        createdAt: new Date(n.createdAt)\n      }));\n    }\n    return [\n      {\n        id: \"1\",\n        message: \"New AI service 'Claude 3' added to the Copywriting category\",\n        category: \"copywriting\",\n        isRead: false,\n        createdAt: new Date(Date.now() - 1000 * 60 * 30),\n      },\n      {\n        id: \"2\",\n        message: \"Price update: ChatGPT Plus is now $25/month\",\n        category: \"chat\",\n        isRead: false,\n        createdAt: new Date(Date.now() - 1000 * 60 * 60 * 2),\n      },\n    ];\n  });\n\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n\n  useEffect(() => {\n    localStorage.setItem('favorites', JSON.stringify(Array.from(favorites)));\n  }, [favorites]);\n\n  useEffect(() => {\n    localStorage.setItem('comparing', JSON.stringify(Array.from(comparing)));\n  }, [comparing]);\n\n  useEffect(() => {\n    localStorage.setItem('history', JSON.stringify(history));\n  }, [history]);\n\n  useEffect(() => {\n    localStorage.setItem('notifications', JSON.stringify(notifications));\n  }, [notifications]);\n\n  const addFavorite = (id: string) => {\n    setFavorites(prev => new Set(Array.from(prev).concat(id)));\n  };\n\n  const removeFavorite = (id: string) => {\n    setFavorites(prev => {\n      const newSet = new Set(prev);\n      newSet.delete(id);\n      return newSet;\n    });\n  };\n\n  const toggleFavorite = (id: string) => {\n    if (favorites.has(id)) {\n      removeFavorite(id);\n    } else {\n      addFavorite(id);\n    }\n  };\n\n  const clearFavorites = () => {\n    setFavorites(new Set());\n  };\n\n  const addToCompare = (id: string): boolean => {\n    if (comparing.size >= 4) {\n      return false;\n    }\n    setComparing(prev => new Set(Array.from(prev).concat(id)));\n    return true;\n  };\n\n  const removeFromCompare = (id: string) => {\n    setComparing(prev => {\n      const newSet = new Set(prev);\n      newSet.delete(id);\n      return newSet;\n    });\n  };\n\n  const toggleCompare = (id: string): boolean => {\n    if (comparing.has(id)) {\n      removeFromCompare(id);\n      return true;\n    } else {\n      return addToCompare(id);\n    }\n  };\n\n  const clearCompare = () => {\n    setComparing(new Set());\n  };\n\n  const addToHistory = (id: string) => {\n    setHistory(prev => {\n      const filtered = prev.filter(item => item !== id);\n      return [id, ...filtered].slice(0, 20);\n    });\n  };\n\n  const clearHistory = () => {\n    setHistory([]);\n  };\n\n  const markNotificationAsRead = (id: string) => {\n    setNotifications(prev =>\n      prev.map(notif =>\n        notif.id === id ? { ...notif, isRead: true } : notif\n      )\n    );\n  };\n\n  const markAllNotificationsAsRead = () => {\n    setNotifications(prev =>\n      prev.map(notif => ({ ...notif, isRead: true }))\n    );\n  };\n\n  const deleteNotification = (id: string) => {\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\n  };\n\n  const clearAllNotifications = () => {\n    setNotifications([]);\n  };\n\n  const unreadNotificationsCount = notifications.filter(n => !n.isRead).length;\n\n  const value = {\n    favorites,\n    comparing,\n    history,\n    notifications,\n    selectedCategory,\n    addFavorite,\n    removeFavorite,\n    toggleFavorite,\n    clearFavorites,\n    addToCompare,\n    removeFromCompare,\n    toggleCompare,\n    clearCompare,\n    addToHistory,\n    clearHistory,\n    markNotificationAsRead,\n    markAllNotificationsAsRead,\n    deleteNotification,\n    clearAllNotifications,\n    unreadNotificationsCount,\n    setSelectedCategory,\n  };\n\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\n}\n\nexport function useApp() {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within AppProvider');\n  }\n  return context;\n}\n","size_bytes":5596},"client/src/pages/ServiceDetail.tsx":{"content":"import { useRoute, useLocation, Link } from \"wouter\";\nimport { MOCK_SERVICES } from \"@/lib/mockData\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Star, Heart, GitCompare, ExternalLink, Check } from \"lucide-react\";\nimport { useEffect } from \"react\";\nimport RecommendedServices from \"@/components/RecommendedServices\";\nimport PurchaseDialog from \"@/components/PurchaseDialog\";\nimport { useApp } from \"@/context/AppContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatPrice } from \"@/lib/utils\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\n\nexport default function ServiceDetail() {\n  const [, params] = useRoute(\"/service/:id\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { favorites, comparing, toggleFavorite, toggleCompare, addToHistory, setSelectedCategory } = useApp();\n\n  const service = MOCK_SERVICES.find(s => s.id === params?.id);\n\n  useEffect(() => {\n    if (service) {\n      addToHistory(service.id);\n    }\n  }, [service?.id]);\n\n  const handleRecommendedServiceClick = (serviceId: string) => {\n    setLocation(`/service/${serviceId}`);\n  };\n\n  if (!service) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-2\">Service not found</h1>\n          <p className=\"text-muted-foreground\">The service you're looking for doesn't exist.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const handleFavoriteToggle = () => {\n    if (service) {\n      toggleFavorite(service.id);\n    }\n  };\n\n  const handleCompareToggle = () => {\n    if (service) {\n      const success = toggleCompare(service.id);\n      if (!success && !comparing.has(service.id)) {\n        toast({\n          title: \"Comparison limit reached\",\n          description: \"You can compare up to 4 services at once\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const isFavorite = service ? favorites.has(service.id) : false;\n  const isComparing = service ? comparing.has(service.id) : false;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-6xl mx-auto px-6 py-8 space-y-6\">\n        <Breadcrumb data-testid=\"breadcrumb-service-detail\">\n          <BreadcrumbList>\n            <BreadcrumbItem>\n              <BreadcrumbLink asChild>\n                <Link href=\"/\" data-testid=\"link-breadcrumb-home\">Home</Link>\n              </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n            <BreadcrumbItem>\n              <BreadcrumbLink asChild>\n                <Link \n                  href=\"/\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    setSelectedCategory(service.category);\n                    setLocation('/');\n                  }}\n                  data-testid=\"link-breadcrumb-category\"\n                >\n                  {service.category.charAt(0).toUpperCase() + service.category.slice(1)}\n                </Link>\n              </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n            <BreadcrumbItem>\n              <BreadcrumbPage data-testid=\"text-breadcrumb-service\">{service.name}</BreadcrumbPage>\n            </BreadcrumbItem>\n          </BreadcrumbList>\n        </Breadcrumb>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"space-y-6 pb-6\">\n            <div className=\"flex items-start gap-6\">\n              <div \n                className=\"flex items-center justify-center h-24 w-24 rounded-md overflow-hidden flex-shrink-0\"\n                style={{ backgroundColor: service.logoUrl ? '#ffffff' : service.color }}\n              >\n                {service.logoUrl ? (\n                  <img \n                    src={service.logoUrl} \n                    alt={`${service.name} logo`} \n                    className=\"h-16 w-16 object-contain\"\n                    onError={(e) => {\n                      const target = e.target as HTMLImageElement;\n                      target.style.display = 'none';\n                      const parent = target.parentElement;\n                      if (parent) {\n                        parent.style.backgroundColor = service.color;\n                        parent.innerHTML = `<span class=\"text-4xl font-bold text-white\">${service.name.charAt(0)}</span>`;\n                      }\n                    }}\n                  />\n                ) : (\n                  <span className=\"text-4xl font-bold text-white\">{service.name.charAt(0)}</span>\n                )}\n              </div>\n\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-start justify-between gap-4 mb-3\">\n                  <div>\n                    <h1 className=\"text-3xl font-bold tracking-tight mb-2\" data-testid=\"text-service-detail-name\">\n                      {service.name}\n                    </h1>\n                    <p className=\"text-lg text-muted-foreground\">{service.subtitle}</p>\n                  </div>\n\n                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n                    <PurchaseDialog service={service} />\n                    <Button\n                      variant={isFavorite ? \"default\" : \"outline\"}\n                      onClick={handleFavoriteToggle}\n                      className=\"gap-2\"\n                      data-testid=\"button-favorite-detail\"\n                    >\n                      <Heart className={`h-4 w-4 ${isFavorite ? 'fill-current' : ''}`} />\n                      {isFavorite ? 'Saved' : 'Save'}\n                    </Button>\n                    <Button\n                      variant={isComparing ? \"default\" : \"outline\"}\n                      onClick={handleCompareToggle}\n                      className=\"gap-2\"\n                      data-testid=\"button-compare-detail\"\n                    >\n                      <GitCompare className=\"h-4 w-4\" />\n                      {isComparing ? 'Comparing' : 'Compare'}\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-4 flex-wrap\">\n                  <div className=\"flex items-center gap-1\">\n                    <Star className=\"h-5 w-5 fill-yellow-500 text-yellow-500\" />\n                    <span className=\"font-semibold text-lg\">{service.rating}</span>\n                  </div>\n                  <Badge variant=\"secondary\" className=\"text-sm\">{formatPrice(service.price)}</Badge>\n                  <Badge \n                    variant=\"outline\" \n                    className=\"text-sm capitalize cursor-pointer hover-elevate\" \n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setSelectedCategory(service.category);\n                      setLocation('/');\n                    }}\n                    data-testid=\"badge-category\"\n                  >\n                    {service.category}\n                  </Badge>\n                  {service.website && (\n                    <a href={service.website} target=\"_blank\" rel=\"noopener noreferrer\">\n                      <Button variant=\"ghost\" className=\"gap-2 px-2\">\n                        Visit Website\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </Button>\n                    </a>\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"space-y-8 pt-6 border-t\">\n            <div>\n              <h2 className=\"text-xl font-semibold mb-3\">About</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">{service.fullDescription}</p>\n            </div>\n\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4\">Key Features</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                {service.features.map((feature, index) => (\n                  <div key={index} className=\"flex items-start gap-2\">\n                    <Check className=\"h-5 w-5 text-primary mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-muted-foreground\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4\">Pricing Plans</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {service.pricingTiers.map((tier: any, index: number) => (\n                  <Card key={index} className={index === 1 ? 'border-primary' : ''}>\n                    <CardHeader className=\"pb-4\">\n                      <h3 className=\"font-semibold text-lg\">{tier.name}</h3>\n                      <p className=\"text-2xl font-bold\">{tier.price}</p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-2\">\n                      {tier.features.map((feature: string, idx: number) => (\n                        <div key={idx} className=\"flex items-start gap-2\">\n                          <Check className=\"h-4 w-4 text-primary mt-0.5 flex-shrink-0\" />\n                          <span className=\"text-sm text-muted-foreground\">{feature}</span>\n                        </div>\n                      ))}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4\">Use Cases</h2>\n              <div className=\"flex flex-wrap gap-2\">\n                {service.useCases.map((useCase, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-sm\">\n                    {useCase}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <RecommendedServices\n          currentServiceId={service.id}\n          category={service.category}\n          onServiceClick={handleRecommendedServiceClick}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":10260},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/SearchBar.tsx":{"content":"import { Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface SearchBarProps {\n  value: string;\n  onChange: (value: string) => void;\n  onSearch: () => void;\n}\n\nexport default function SearchBar({ value, onChange, onSearch }: SearchBarProps) {\n  return (\n    <div className=\"flex gap-2 w-full max-w-4xl\">\n      <div className=\"relative flex-1\">\n        <Search className=\"absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n        <Input\n          type=\"search\"\n          placeholder=\"Search the catalog…\"\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          onKeyDown={(e) => e.key === 'Enter' && onSearch()}\n          className=\"pl-12 h-12 text-base bg-card border-card-border\"\n          data-testid=\"input-search\"\n        />\n      </div>\n      <Button \n        size=\"lg\" \n        onClick={onSearch}\n        className=\"px-8 h-12\"\n        data-testid=\"button-ai-search\"\n      >\n        AI Search\n      </Button>\n    </div>\n  );\n}\n","size_bytes":1074},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"client/src/pages/Compare.tsx":{"content":"import { Link } from \"wouter\";\nimport { MOCK_SERVICES } from \"@/lib/mockData\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Star, X, Check, Minus } from \"lucide-react\";\nimport { useApp } from \"@/context/AppContext\";\nimport { formatPrice } from \"@/lib/utils\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\n\nexport default function Compare() {\n  const { comparing, removeFromCompare, clearCompare } = useApp();\n\n  const handleRemove = (serviceId: string) => {\n    removeFromCompare(serviceId);\n  };\n\n  const handleClearAll = () => {\n    clearCompare();\n  };\n\n  const comparingIds = Array.from(comparing);\n  const comparingServices = MOCK_SERVICES.filter(service => \n    comparingIds.includes(service.id)\n  );\n\n  const allFeatures = Array.from(\n    new Set(comparingServices.flatMap(s => s.features))\n  );\n\n  const hasFeature = (service: typeof comparingServices[0], feature: string) => {\n    return service.features.includes(feature);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-6\">\n        <Breadcrumb data-testid=\"breadcrumb-compare\">\n          <BreadcrumbList>\n            <BreadcrumbItem>\n              <BreadcrumbLink asChild>\n                <Link href=\"/\" data-testid=\"link-breadcrumb-home\">Home</Link>\n              </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n            <BreadcrumbItem>\n              <BreadcrumbPage data-testid=\"text-breadcrumb-compare\">Compare</BreadcrumbPage>\n            </BreadcrumbItem>\n          </BreadcrumbList>\n        </Breadcrumb>\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold tracking-tight\" data-testid=\"text-compare-title\">\n              Compare Services\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">\n              {comparingServices.length} service{comparingServices.length !== 1 ? 's' : ''} selected\n            </p>\n          </div>\n\n          {comparingServices.length > 0 && (\n            <Button\n              onClick={handleClearAll}\n              variant=\"outline\"\n              data-testid=\"button-clear-comparison\"\n            >\n              Clear All\n            </Button>\n          )}\n        </div>\n\n        {comparingServices.length === 0 ? (\n          <div className=\"text-center py-24\">\n            <p className=\"text-xl text-muted-foreground mb-4\">No services to compare</p>\n            <p className=\"text-sm text-muted-foreground\">\n              Add services to comparison from the main catalog\n            </p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <div className=\"inline-block min-w-full align-middle\">\n              <div className=\"grid grid-cols-[200px_repeat(auto-fit,minmax(280px,1fr))] gap-4\">\n                <div className=\"space-y-4\">\n                  <div className=\"h-48\"></div>\n                  <Card className=\"p-4\">\n                    <h3 className=\"font-semibold mb-4\">Basic Info</h3>\n                    <div className=\"space-y-3 text-sm text-muted-foreground\">\n                      <p>Rating</p>\n                      <p>Price</p>\n                      <p>Category</p>\n                    </div>\n                  </Card>\n\n                  <Card className=\"p-4\">\n                    <h3 className=\"font-semibold mb-4\">Pricing Tiers</h3>\n                    <div className=\"space-y-3 text-sm text-muted-foreground\">\n                      {comparingServices[0]?.pricingTiers.map((tier: any) => (\n                        <p key={tier.name}>{tier.name}</p>\n                      ))}\n                    </div>\n                  </Card>\n\n                  <Card className=\"p-4\">\n                    <h3 className=\"font-semibold mb-4\">Features</h3>\n                    <div className=\"space-y-3 text-sm text-muted-foreground\">\n                      {allFeatures.map(feature => (\n                        <p key={feature}>{feature}</p>\n                      ))}\n                    </div>\n                  </Card>\n                </div>\n\n                {comparingServices.map(service => (\n                  <div key={service.id} className=\"space-y-4\">\n                    <Card className=\"relative\">\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"absolute top-2 right-2 z-10\"\n                        onClick={() => handleRemove(service.id)}\n                        data-testid={`button-remove-${service.id}`}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                      <CardHeader className=\"space-y-3 pb-3\">\n                        <div \n                          className=\"flex items-center justify-center h-16 w-16 rounded-md text-3xl mx-auto\"\n                          style={{ backgroundColor: service.color }}\n                        >\n                          {service.icon}\n                        </div>\n                        <div className=\"text-center space-y-1\">\n                          <h3 className=\"font-semibold text-lg\">{service.name}</h3>\n                          <p className=\"text-sm text-muted-foreground\">{service.subtitle}</p>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-sm text-muted-foreground text-center\">\n                          {service.description}\n                        </p>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"p-4\">\n                      <div className=\"space-y-3 text-sm\">\n                        <div className=\"flex items-center gap-1\">\n                          <Star className=\"h-4 w-4 fill-yellow-500 text-yellow-500\" />\n                          <span className=\"font-medium\">{service.rating}</span>\n                        </div>\n                        <Badge variant=\"secondary\">{formatPrice(service.price)}</Badge>\n                        <p className=\"text-muted-foreground capitalize\">{service.category}</p>\n                      </div>\n                    </Card>\n\n                    <Card className=\"p-4\">\n                      <div className=\"space-y-3 text-sm\">\n                        {service.pricingTiers.map((tier: any) => (\n                          <p key={tier.name} className=\"font-medium\">{tier.price}</p>\n                        ))}\n                      </div>\n                    </Card>\n\n                    <Card className=\"p-4\">\n                      <div className=\"space-y-3\">\n                        {allFeatures.map(feature => (\n                          <div key={feature} className=\"flex items-center justify-center\">\n                            {hasFeature(service, feature) ? (\n                              <Check className=\"h-4 w-4 text-green-500\" />\n                            ) : (\n                              <Minus className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </Card>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7565},"client/src/components/examples/SearchBar.tsx":{"content":"import { useState } from \"react\";\nimport SearchBar from \"../SearchBar\";\n\nexport default function SearchBarExample() {\n  const [value, setValue] = useState(\"\");\n\n  return (\n    <SearchBar \n      value={value} \n      onChange={setValue}\n      onSearch={() => console.log('Search triggered:', value)}\n    />\n  );\n}\n","size_bytes":312},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport const aiServices = pgTable(\"ai_services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  subtitle: text(\"subtitle\").notNull(),\n  description: text(\"description\").notNull(),\n  fullDescription: text(\"full_description\").notNull(),\n  category: text(\"category\").notNull(),\n  price: text(\"price\").notNull(),\n  rating: text(\"rating\").notNull(),\n  icon: text(\"icon\").notNull(),\n  color: text(\"color\").notNull(),\n  logoUrl: text(\"logo_url\"),\n  features: text(\"features\").array().notNull(),\n  pricingTiers: jsonb(\"pricing_tiers\").notNull(),\n  useCases: text(\"use_cases\").array().notNull(),\n  website: text(\"website\"),\n  popularity: integer(\"popularity\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertAiServiceSchema = createInsertSchema(aiServices).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertAiService = z.infer<typeof insertAiServiceSchema>;\nexport type AiService = typeof aiServices.$inferSelect;\n\nexport const favorites = pgTable(\"favorites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  serviceId: varchar(\"service_id\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertFavoriteSchema = createInsertSchema(favorites).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertFavorite = z.infer<typeof insertFavoriteSchema>;\nexport type Favorite = typeof favorites.$inferSelect;\n\nexport const viewHistory = pgTable(\"view_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  serviceId: varchar(\"service_id\").notNull(),\n  viewedAt: timestamp(\"viewed_at\").notNull().defaultNow(),\n});\n\nexport const insertViewHistorySchema = createInsertSchema(viewHistory).omit({\n  id: true,\n  viewedAt: true,\n});\n\nexport type InsertViewHistory = z.infer<typeof insertViewHistorySchema>;\nexport type ViewHistory = typeof viewHistory.$inferSelect;\n\nexport const comparisons = pgTable(\"comparisons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  serviceIds: text(\"service_ids\").array().notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertComparisonSchema = createInsertSchema(comparisons).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertComparison = z.infer<typeof insertComparisonSchema>;\nexport type Comparison = typeof comparisons.$inferSelect;\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  message: text(\"message\").notNull(),\n  category: text(\"category\"),\n  isRead: boolean(\"is_read\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\n","size_bytes":3789},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/lib/cartData.ts":{"content":"export interface CartItem {\n  id: string;\n  serviceId: string;\n  serviceName: string;\n  serviceLogoUrl?: string;\n  serviceColor: string;\n  planIndex: number;\n  planName: string;\n  price: number;\n  billingCycle: \"monthly\" | \"yearly\";\n  addedAt: string;\n  // Service access credentials\n  login?: string;\n  password?: string;\n  paymentUrl?: string;\n}\n\nexport interface CartSummary {\n  items: CartItem[];\n  totalItems: number;\n  totalPrice: number;\n}\n\nexport const getCartFromStorage = (): CartItem[] => {\n  const stored = localStorage.getItem(\"cart\");\n  return stored ? JSON.parse(stored) : [];\n};\n\nexport const saveCartToStorage = (items: CartItem[]) => {\n  localStorage.setItem(\"cart\", JSON.stringify(items));\n};\n\nexport const addToCart = (item: Omit<CartItem, \"id\" | \"addedAt\">): CartItem => {\n  const cartItems = getCartFromStorage();\n  \n  const newItem: CartItem = {\n    ...item,\n    id: Date.now().toString(),\n    addedAt: new Date().toISOString(),\n  };\n  \n  cartItems.push(newItem);\n  saveCartToStorage(cartItems);\n  \n  return newItem;\n};\n\nexport const removeFromCart = (itemId: string) => {\n  const cartItems = getCartFromStorage();\n  const filtered = cartItems.filter(item => item.id !== itemId);\n  saveCartToStorage(filtered);\n};\n\nexport const updateCartItemCredentials = (\n  itemId: string, \n  credentials: { login?: string; password?: string; paymentUrl?: string }\n) => {\n  const cartItems = getCartFromStorage();\n  const updated = cartItems.map(item => \n    item.id === itemId \n      ? { ...item, ...credentials }\n      : item\n  );\n  saveCartToStorage(updated);\n};\n\nexport const clearCart = () => {\n  localStorage.removeItem(\"cart\");\n};\n\nexport const getCartSummary = (): CartSummary => {\n  const items = getCartFromStorage();\n  return {\n    items,\n    totalItems: items.length,\n    totalPrice: items.reduce((sum, item) => sum + item.price, 0),\n  };\n};\n","size_bytes":1863},"client/src/pages/Account.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  User, \n  CreditCard, \n  Settings, \n  ShoppingBag, \n  Calendar,\n  DollarSign,\n  ExternalLink,\n  Download,\n  Clock,\n  AlertCircle,\n  Upload,\n  FileText\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { MOCK_SERVICES } from \"@/lib/mockData\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\n\ninterface Purchase {\n  id: string;\n  serviceId: string;\n  planName: string;\n  price: number;\n  purchaseDate: string;\n  status: \"active\" | \"cancelled\" | \"pending_payment\";\n  billingCycle: \"monthly\" | \"yearly\";\n  payerId?: string;\n  paymentMethod?: \"card\" | \"invoice\" | \"balance\" | \"yumoney\" | \"sbp\" | \"sberpay\";\n  invoiceUrl?: string;\n  login?: string;\n  password?: string;\n  paymentUrl?: string;\n}\n\nexport default function Account() {\n  const [purchases, setPurchases] = useState<Purchase[]>([]);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"userPurchases\");\n    if (stored) {\n      setPurchases(JSON.parse(stored));\n    }\n  }, []);\n\n  const activePurchases = purchases.filter(p => p.status === \"active\" || p.status === \"pending_payment\");\n\n  const handleUploadReceipt = (purchaseId: string) => {\n    const purchase = purchases.find(p => p.id === purchaseId);\n    if (!purchase) return;\n    \n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'image/*,.pdf';\n    input.onchange = (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (file) {\n        const updatedPurchases = purchases.map(p => \n          p.id === purchaseId ? { ...p, status: \"active\" as const } : p\n        );\n        setPurchases(updatedPurchases);\n        localStorage.setItem(\"userPurchases\", JSON.stringify(updatedPurchases));\n        alert('Спасибо! Счет загружен, заказ активирован.');\n      }\n    };\n    input.click();\n  };\n  const totalSpending = purchases.reduce((sum, p) => sum + p.price, 0);\n\n  const getPurchasedService = (serviceId: string) => {\n    return MOCK_SERVICES.find(s => s.id === serviceId);\n  };\n\n  const getNextPaymentDate = (purchase: Purchase) => {\n    const purchaseDate = new Date(purchase.purchaseDate);\n    const now = new Date();\n    const nextDate = new Date(purchaseDate);\n    \n    if (purchase.billingCycle === \"monthly\") {\n      while (nextDate <= now) {\n        nextDate.setMonth(nextDate.getMonth() + 1);\n      }\n    } else {\n      while (nextDate <= now) {\n        nextDate.setFullYear(nextDate.getFullYear() + 1);\n      }\n    }\n    \n    return nextDate;\n  };\n\n  const getDaysUntilPayment = (nextPaymentDate: Date) => {\n    const now = new Date();\n    const diffTime = nextPaymentDate.getTime() - now.getTime();\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n\n  const getPaymentStatus = (daysUntil: number) => {\n    if (daysUntil <= 3) return \"urgent\";\n    if (daysUntil <= 7) return \"warning\";\n    return \"active\";\n  };\n\n  const upcomingPayments = activePurchases\n    .map(purchase => ({\n      ...purchase,\n      nextPaymentDate: getNextPaymentDate(purchase),\n    }))\n    .sort((a, b) => a.nextPaymentDate.getTime() - b.nextPaymentDate.getTime());\n\n  const nextPaymentAmount = upcomingPayments.length > 0 ? upcomingPayments[0].price : 0;\n  const monthlyTotal = activePurchases\n    .filter(p => p.billingCycle === \"monthly\")\n    .reduce((sum, p) => sum + p.price, 0);\n\n  const handleCancelSubscription = (purchaseId: string) => {\n    const updated = purchases.map(p => \n      p.id === purchaseId ? { ...p, status: \"cancelled\" as const } : p\n    );\n    setPurchases(updated);\n    localStorage.setItem(\"userPurchases\", JSON.stringify(updated));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <Breadcrumb className=\"mb-6\">\n          <BreadcrumbList>\n            <BreadcrumbItem>\n              <BreadcrumbLink asChild>\n                <Link href=\"/\" data-testid=\"link-home\">Home</Link>\n              </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n            <BreadcrumbItem>\n              <BreadcrumbPage>Account</BreadcrumbPage>\n            </BreadcrumbItem>\n          </BreadcrumbList>\n        </Breadcrumb>\n\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Avatar className=\"h-20 w-20\">\n            <AvatarImage src=\"\" alt=\"User\" />\n            <AvatarFallback className=\"text-2xl bg-primary/10 text-primary\">JD</AvatarFallback>\n          </Avatar>\n          <div>\n            <h1 className=\"text-3xl font-bold mb-1\">John Doe</h1>\n            <p className=\"text-muted-foreground\">john.doe@example.com</p>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4 lg:w-auto lg:inline-grid\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n              <User className=\"h-4 w-4 mr-2\" />\n              Overview\n            </TabsTrigger>\n            <TabsTrigger value=\"subscriptions\" data-testid=\"tab-subscriptions\">\n              <ShoppingBag className=\"h-4 w-4 mr-2\" />\n              My Services\n            </TabsTrigger>\n            <TabsTrigger value=\"history\" data-testid=\"tab-history\">\n              <Calendar className=\"h-4 w-4 mr-2\" />\n              Purchase History\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Settings\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Active Services</CardTitle>\n                  <ShoppingBag className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-active-services-count\">\n                    {activePurchases.length}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    AI tools subscribed\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Monthly Cost</CardTitle>\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-monthly-cost\">\n                    ${monthlyTotal.toFixed(2)}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Per month\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Next Payment</CardTitle>\n                  <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-next-payment\">\n                    ${nextPaymentAmount.toFixed(2)}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {upcomingPayments.length > 0 \n                      ? upcomingPayments[0].nextPaymentDate.toLocaleDateString()\n                      : \"No payments scheduled\"\n                    }\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Payment Method</CardTitle>\n                  <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">••••</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Visa ending in 4242\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {upcomingPayments.length > 0 ? (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-5 w-5\" />\n                    Upcoming Payments\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {upcomingPayments.slice(0, 5).map((payment) => {\n                    const service = getPurchasedService(payment.serviceId);\n                    if (!service) return null;\n                    \n                    const daysUntil = getDaysUntilPayment(payment.nextPaymentDate);\n                    const status = getPaymentStatus(daysUntil);\n                    \n                    return (\n                      <div \n                        key={payment.id} \n                        className=\"flex items-center justify-between p-4 border border-border rounded-md hover-elevate\"\n                        data-testid={`card-upcoming-payment-${payment.id}`}\n                      >\n                        <div className=\"flex items-center gap-4 flex-1\">\n                          {service.logoUrl ? (\n                            <img \n                              src={service.logoUrl} \n                              alt={service.name}\n                              className=\"w-12 h-12 object-contain rounded-md\"\n                            />\n                          ) : (\n                            <div className=\"w-12 h-12 bg-primary/10 rounded-md flex items-center justify-center\">\n                              <span className=\"text-primary font-semibold\">\n                                {service.name.charAt(0)}\n                              </span>\n                            </div>\n                          )}\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold\">{service.name}</h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {payment.planName} • ${payment.price}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"text-right\">\n                            <p className=\"text-sm font-medium\">\n                              {payment.nextPaymentDate.toLocaleDateString()}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {daysUntil === 0 ? \"Today\" : daysUntil === 1 ? \"Tomorrow\" : `In ${daysUntil} days`}\n                            </p>\n                          </div>\n                          {status === \"urgent\" && (\n                            <Badge variant=\"destructive\" className=\"gap-1\">\n                              <AlertCircle className=\"h-3 w-3\" />\n                              Urgent\n                            </Badge>\n                          )}\n                          {status === \"warning\" && (\n                            <Badge variant=\"outline\" className=\"gap-1 bg-yellow-500/10 text-yellow-500 border-yellow-500/20\">\n                              <Clock className=\"h-3 w-3\" />\n                              Soon\n                            </Badge>\n                          )}\n                          {status === \"active\" && (\n                            <Badge variant=\"outline\" className=\"gap-1 bg-green-500/10 text-green-500 border-green-500/20\">\n                              Active\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <ShoppingBag className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No active subscriptions</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Start exploring AI services to boost your productivity\n                  </p>\n                  <Link href=\"/\">\n                    <Button data-testid=\"button-browse-services\">Browse Services</Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"subscriptions\" className=\"space-y-4\">\n            {activePurchases.length > 0 ? (\n              activePurchases.map((purchase) => {\n                const service = getPurchasedService(purchase.serviceId);\n                if (!service) return null;\n\n                return (\n                  <Card key={purchase.id} data-testid={`card-subscription-${purchase.id}`}>\n                    <CardContent className=\"pt-6\">\n                      <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n                        <div className=\"flex items-start gap-4\">\n                          {service.logoUrl ? (\n                            <img \n                              src={service.logoUrl} \n                              alt={service.name}\n                              className=\"w-16 h-16 object-contain rounded-md\"\n                            />\n                          ) : (\n                            <div className=\"w-16 h-16 bg-primary/10 rounded-md flex items-center justify-center\">\n                              <span className=\"text-primary font-bold text-xl\">\n                                {service.name.charAt(0)}\n                              </span>\n                            </div>\n                          )}\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <h3 className=\"font-semibold text-lg\">{service.name}</h3>\n                              {purchase.status === \"pending_payment\" ? (\n                                <Badge variant=\"outline\" className=\"bg-yellow-500/10 text-yellow-500 border-yellow-500/20\">\n                                  Ожидает оплаты\n                                </Badge>\n                              ) : (\n                                <Badge variant=\"outline\" className=\"bg-green-500/10 text-green-500 border-green-500/20\">\n                                  Active\n                                </Badge>\n                              )}\n                            </div>\n                            <p className=\"text-sm text-muted-foreground mb-2\">\n                              {service.category} • {service.description.substring(0, 80)}...\n                            </p>\n                            <div className=\"flex flex-wrap gap-3 text-sm mb-3\">\n                              <span className=\"text-muted-foreground\">\n                                Plan: <strong className=\"text-foreground\">{purchase.planName}</strong>\n                              </span>\n                              <span className=\"text-muted-foreground\">\n                                Price: <strong className=\"text-foreground\">${purchase.price}/{purchase.billingCycle === \"monthly\" ? \"mo\" : \"yr\"}</strong>\n                              </span>\n                              <span className=\"text-muted-foreground\">\n                                Since: <strong className=\"text-foreground\">{new Date(purchase.purchaseDate).toLocaleDateString()}</strong>\n                              </span>\n                            </div>\n                            {(purchase.login || purchase.password || purchase.paymentUrl) && (\n                              <div className=\"p-3 bg-muted/50 rounded-md space-y-2 text-sm\">\n                                <h4 className=\"font-medium text-xs text-muted-foreground uppercase\">Доступ к сервису</h4>\n                                {purchase.login && (\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Логин: </span>\n                                    <span className=\"font-mono\" data-testid={`text-login-${purchase.id}`}>{purchase.login}</span>\n                                  </div>\n                                )}\n                                {purchase.password && (\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Пароль: </span>\n                                    <span className=\"font-mono\" data-testid={`text-password-${purchase.id}`}>••••••••</span>\n                                  </div>\n                                )}\n                                {purchase.paymentUrl && (\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Ссылка на оплату: </span>\n                                    <a \n                                      href={purchase.paymentUrl} \n                                      target=\"_blank\" \n                                      rel=\"noopener noreferrer\"\n                                      className=\"text-primary hover:underline font-mono break-all\"\n                                      data-testid={`link-payment-url-${purchase.id}`}\n                                    >\n                                      {purchase.paymentUrl}\n                                    </a>\n                                  </div>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {purchase.status === \"pending_payment\" && purchase.paymentMethod === \"invoice\" && (\n                            <>\n                              {purchase.invoiceUrl && (\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => {\n                                    if (purchase.invoiceUrl) {\n                                      const link = document.createElement('a');\n                                      link.href = purchase.invoiceUrl;\n                                      link.download = `Счет_${purchase.id}.txt`;\n                                      link.click();\n                                    }\n                                  }}\n                                  data-testid={`button-download-invoice-${purchase.id}`}\n                                >\n                                  <FileText className=\"h-4 w-4 mr-2\" />\n                                  Скачать счет\n                                </Button>\n                              )}\n                              <Button \n                                variant=\"default\" \n                                size=\"sm\"\n                                onClick={() => handleUploadReceipt(purchase.id)}\n                                data-testid={`button-upload-receipt-${purchase.id}`}\n                              >\n                                <Upload className=\"h-4 w-4 mr-2\" />\n                                Загрузить счет\n                              </Button>\n                            </>\n                          )}\n                          <Link href={`/service/${service.id}`}>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${purchase.id}`}>\n                              <ExternalLink className=\"h-4 w-4 mr-2\" />\n                              View Details\n                            </Button>\n                          </Link>\n                          {purchase.status !== \"pending_payment\" && (\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => handleCancelSubscription(purchase.id)}\n                              data-testid={`button-cancel-${purchase.id}`}\n                            >\n                              Cancel\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })\n            ) : (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <ShoppingBag className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No active subscriptions</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Discover AI tools that can transform your workflow\n                  </p>\n                  <Link href=\"/\">\n                    <Button data-testid=\"button-browse-catalog\">Browse Catalog</Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"history\" className=\"space-y-4\">\n            {purchases.length > 0 ? (\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"space-y-4\">\n                    {purchases.map((purchase) => {\n                      const service = getPurchasedService(purchase.serviceId);\n                      if (!service) return null;\n\n                      return (\n                        <div \n                          key={purchase.id}\n                          className=\"flex items-center justify-between pb-4 border-b border-border last:border-0\"\n                          data-testid={`row-purchase-${purchase.id}`}\n                        >\n                          <div className=\"flex items-center gap-4\">\n                            <Calendar className=\"h-5 w-5 text-muted-foreground\" />\n                            <div>\n                              <h4 className=\"font-medium\">{service.name}</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {new Date(purchase.purchaseDate).toLocaleDateString()} • {purchase.planName}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-4\">\n                            <Badge \n                              variant={purchase.status === \"active\" ? \"default\" : \"outline\"}\n                              className={purchase.status === \"active\" ? \"bg-green-500/10 text-green-500 border-green-500/20\" : \"\"}\n                            >\n                              {purchase.status}\n                            </Badge>\n                            <span className=\"font-semibold\">${purchase.price}</span>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                  <div className=\"mt-6 pt-6 border-t border-border\">\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-download-history\">\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Download Purchase History\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <Calendar className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No purchase history</h3>\n                  <p className=\"text-muted-foreground\">\n                    Your purchases will appear here\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Account Settings</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Full Name</label>\n                  <input \n                    type=\"text\" \n                    defaultValue=\"John Doe\" \n                    className=\"w-full px-3 py-2 bg-background border border-border rounded-md\"\n                    data-testid=\"input-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Email</label>\n                  <input \n                    type=\"email\" \n                    defaultValue=\"john.doe@example.com\" \n                    className=\"w-full px-3 py-2 bg-background border border-border rounded-md\"\n                    data-testid=\"input-email\"\n                  />\n                </div>\n                <Button data-testid=\"button-save-settings\">Save Changes</Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment Methods</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 border border-border rounded-md\">\n                  <div className=\"flex items-center gap-3\">\n                    <CreditCard className=\"h-5 w-5 text-muted-foreground\" />\n                    <div>\n                      <p className=\"font-medium\">Visa ending in 4242</p>\n                      <p className=\"text-sm text-muted-foreground\">Expires 12/2025</p>\n                    </div>\n                  </div>\n                  <Badge>Default</Badge>\n                </div>\n                <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-add-payment\">\n                  Add Payment Method\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":27238},"client/src/lib/payersData.ts":{"content":"export interface Payer {\n  id: string;\n  type: \"company\" | \"individual\";\n  balance: number;\n  services?: string[]; // service IDs\n  // Company fields\n  companyName?: string;\n  inn?: string;\n  kpp?: string;\n  // Individual fields\n  firstName?: string;\n  lastName?: string;\n  passportNumber?: string;\n}\n\nexport interface Transaction {\n  id: string;\n  payerId: string;\n  date: string;\n  type: \"deposit\" | \"withdrawal\" | \"purchase\";\n  amount: number;\n  comment: string;\n  serviceId?: string;\n  serviceName?: string;\n}\n\nexport interface Purchase {\n  id: string;\n  serviceId: string;\n  planName: string;\n  price: number;\n  purchaseDate: string;\n  status: \"active\" | \"cancelled\" | \"pending_payment\";\n  billingCycle: \"monthly\" | \"yearly\";\n  payerId?: string;\n  paymentMethod?: \"card\" | \"invoice\" | \"balance\" | \"yumoney\" | \"sbp\" | \"sberpay\";\n  invoiceUrl?: string;\n  // Service access credentials\n  login?: string;\n  password?: string;\n  paymentUrl?: string;\n}\n\nexport const MOCK_PAYERS: Payer[] = [\n  {\n    id: \"payer-1\",\n    type: \"company\",\n    companyName: 'ООО \"Ай Хант\"',\n    inn: \"7707083893\",\n    kpp: \"770701001\",\n    balance: 150000,\n    services: [\"chatgpt\", \"midjourney\", \"claude\"],\n  },\n  {\n    id: \"payer-2\",\n    type: \"individual\",\n    firstName: \"Иван\",\n    lastName: \"Иванов\",\n    passportNumber: \"1234 567890\",\n    balance: 1200,\n    services: [\"chatgpt\"],\n  },\n];\n\nexport const PAYMENT_METHODS = [\n  {\n    id: \"card\",\n    name: \"Корпоративная карта\",\n    description: \"Карта компании\",\n    icon: \"💳\",\n  },\n  {\n    id: \"invoice\",\n    name: \"Оплата по счету\",\n    description: \"Банковский счет организации\",\n    icon: \"🏦\",\n  },\n  {\n    id: \"yumoney\",\n    name: \"ЮMoney\",\n    description: \"Электронный кошелек\",\n    icon: \"🟣\",\n  },\n  {\n    id: \"sbp\",\n    name: \"СБП (Система быстрых платежей)\",\n    description: \"Перевод по номеру телефона\",\n    icon: \"💎\",\n  },\n  {\n    id: \"sber\",\n    name: \"SberPay\",\n    description: \"Оплата через СберБанк\",\n    icon: \"🟢\",\n  },\n];\n","size_bytes":2164},"client/src/components/TopUpDialog.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Wallet, Building2, User } from \"lucide-react\";\nimport { type Payer, PAYMENT_METHODS } from \"@/lib/payersData\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface TopUpDialogProps {\n  payers: Payer[];\n  onTopUp: (payerId: string, amount: number, method: string) => void;\n}\n\nexport default function TopUpDialog({ payers, onTopUp }: TopUpDialogProps) {\n  const [open, setOpen] = useState(false);\n  const [selectedPayer, setSelectedPayer] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState(\"card\");\n  const { toast } = useToast();\n\n  const quickAmounts = [500, 1000, 2000, 5000, 10000];\n\n  const handleTopUp = () => {\n    const amountNum = parseFloat(amount);\n    \n    if (!selectedPayer) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Выберите плательщика\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!amountNum || amountNum <= 0) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Введите корректную сумму\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const method = PAYMENT_METHODS.find(m => m.id === paymentMethod);\n    onTopUp(selectedPayer, amountNum, method?.name || paymentMethod);\n    \n    toast({\n      title: \"Баланс пополнен\",\n      description: `Успешно пополнено на ${amountNum} ₽`,\n    });\n\n    setOpen(false);\n    setAmount(\"\");\n    setSelectedPayer(\"\");\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"default\" className=\"gap-2 bg-green-600 hover:bg-green-700\" data-testid=\"button-top-up\">\n          <Wallet className=\"h-4 w-4\" />\n          Пополнить баланс\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>Пополнить баланс</DialogTitle>\n          <DialogDescription>\n            Выберите плательщика и сумму для пополнения\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\">\n          <div className=\"space-y-3\">\n            <Label>Плательщики</Label>\n            <div className=\"space-y-2\">\n              {payers.map((payer) => (\n                <Card\n                  key={payer.id}\n                  className={`p-4 cursor-pointer hover-elevate transition-all ${\n                    selectedPayer === payer.id ? \"ring-2 ring-primary\" : \"\"\n                  }`}\n                  onClick={() => setSelectedPayer(payer.id)}\n                  data-testid={`select-payer-${payer.id}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 rounded-md bg-primary/10 flex items-center justify-center\">\n                      {payer.type === \"company\" ? (\n                        <Building2 className=\"h-5 w-5 text-primary\" />\n                      ) : (\n                        <User className=\"h-5 w-5 text-primary\" />\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\">{payer.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Тип: {payer.type === \"company\" ? \"company\" : \"individual\"}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-muted-foreground\">Баланс:</p>\n                      <p className=\"font-semibold\">\n                        {payer.balance.toLocaleString('ru-RU')} ₽\n                      </p>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"amount\">Пополнить счет на *</Label>\n            <Input\n              id=\"amount\"\n              type=\"number\"\n              placeholder=\"2000\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n              data-testid=\"input-top-up-amount\"\n            />\n            <div className=\"flex gap-2 flex-wrap mt-2\">\n              {quickAmounts.map((qa) => (\n                <Button\n                  key={qa}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setAmount(qa.toString())}\n                  data-testid={`button-quick-amount-${qa}`}\n                >\n                  {qa} ₽\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Выберите способ оплаты</Label>\n            <RadioGroup value={paymentMethod} onValueChange={setPaymentMethod}>\n              {PAYMENT_METHODS.map((method) => (\n                <div \n                  key={method.id}\n                  className=\"flex items-center space-x-2 p-3 border border-border rounded-md hover-elevate cursor-pointer\"\n                  onClick={() => setPaymentMethod(method.id)}\n                >\n                  <RadioGroupItem value={method.id} id={method.id} />\n                  <Label htmlFor={method.id} className=\"flex items-center gap-3 cursor-pointer flex-1\">\n                    <span className=\"text-2xl\">{method.icon}</span>\n                    <div>\n                      <p className=\"font-medium\">{method.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{method.description}</p>\n                    </div>\n                  </Label>\n                </div>\n              ))}\n            </RadioGroup>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-2\">\n          <Button variant=\"outline\" onClick={() => setOpen(false)}>\n            Отмена\n          </Button>\n          <Button onClick={handleTopUp} data-testid=\"button-confirm-top-up\">\n            Пополнить\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6594},"client/src/pages/JobImpact.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Search, ArrowUpDown, ArrowUp, ArrowDown } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\nimport { MOCK_JOBS } from \"@/lib/mockData\";\n\ntype SortField = \"title\" | \"aiImpact\" | \"tasksCount\" | \"aisCount\";\ntype SortOrder = \"asc\" | \"desc\";\n\nexport default function JobImpact() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [sortField, setSortField] = useState<SortField>(\"aiImpact\");\n  const [sortOrder, setSortOrder] = useState<SortOrder>(\"desc\");\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortField(field);\n      setSortOrder(\"desc\");\n    }\n  };\n\n  const handleJobClick = (jobTitle: string) => {\n    setLocation(`/?jobTitle=${encodeURIComponent(jobTitle)}`);\n  };\n\n  const filteredAndSortedJobs = useMemo(() => {\n    let filtered = MOCK_JOBS;\n\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(\n        (job) =>\n          job.title.toLowerCase().includes(query) ||\n          job.category.toLowerCase().includes(query) ||\n          job.description.toLowerCase().includes(query)\n      );\n    }\n\n    return [...filtered].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === \"string\") {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (sortOrder === \"asc\") {\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n      } else {\n        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n      }\n    });\n  }, [searchQuery, sortField, sortOrder]);\n\n  const getImpactColor = (impact: number) => {\n    if (impact >= 80) return \"bg-red-500/10 text-red-500 border-red-500/20\";\n    if (impact >= 60) return \"bg-orange-500/10 text-orange-500 border-orange-500/20\";\n    if (impact >= 40) return \"bg-yellow-500/10 text-yellow-500 border-yellow-500/20\";\n    return \"bg-green-500/10 text-green-500 border-green-500/20\";\n  };\n\n  const SortIcon = ({ field }: { field: SortField }) => {\n    if (sortField !== field) {\n      return <ArrowUpDown className=\"h-4 w-4\" />;\n    }\n    return sortOrder === \"asc\" ? (\n      <ArrowUp className=\"h-4 w-4\" />\n    ) : (\n      <ArrowDown className=\"h-4 w-4\" />\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen p-6 space-y-6\">\n      <Breadcrumb>\n        <BreadcrumbList>\n          <BreadcrumbItem>\n            <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n          </BreadcrumbItem>\n          <BreadcrumbSeparator />\n          <BreadcrumbItem>\n            <BreadcrumbPage>Job Impact Index</BreadcrumbPage>\n          </BreadcrumbItem>\n        </BreadcrumbList>\n      </Breadcrumb>\n\n      <div className=\"space-y-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Job Impact Index</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Analyze how AI is transforming different professions\n          </p>\n        </div>\n\n        <div className=\"bg-card border border-card-border rounded-md p-6 space-y-3\">\n          <h2 className=\"text-lg font-semibold\">Impact of AI on Jobs</h2>\n          <p className=\"text-sm text-muted-foreground leading-relaxed\">\n            The Impact score as computed by TAAFT is expressed as a percentage where <strong>0%</strong> indicates that AI has no impact on that job and <strong>100%</strong> indicates that AI impacts almost every aspect of that job as it was before AI (this does not necessarily mean that the job will cease to exist, only that it's likely to change).\n          </p>\n          <div className=\"pt-2\">\n            <h3 className=\"text-sm font-semibold mb-2\">How the Impact score is calculated</h3>\n            <p className=\"text-sm text-muted-foreground leading-relaxed\">\n              The Impact score takes into account which tasks can be performed with AI, as well as factors such as the relevancy of those tasks for each job, the AI impact score of each task, the number of AIs available for each task and the capabilities of each individual AI within each task.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search for a specific job...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-job-search\"\n          />\n        </div>\n\n        <div className=\"bg-card border border-card-border rounded-md overflow-hidden\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-[50px]\">#</TableHead>\n                <TableHead>\n                  <button\n                    onClick={() => handleSort(\"title\")}\n                    className=\"flex items-center gap-2 hover-elevate active-elevate-2 -mx-2 px-2 py-1 rounded-md transition-colors\"\n                    data-testid=\"sort-title\"\n                  >\n                    Job Title\n                    <SortIcon field=\"title\" />\n                  </button>\n                </TableHead>\n                <TableHead>\n                  <button\n                    onClick={() => handleSort(\"aiImpact\")}\n                    className=\"flex items-center gap-2 hover-elevate active-elevate-2 -mx-2 px-2 py-1 rounded-md transition-colors\"\n                    data-testid=\"sort-impact\"\n                  >\n                    AI Impact\n                    <SortIcon field=\"aiImpact\" />\n                  </button>\n                </TableHead>\n                <TableHead>\n                  <button\n                    onClick={() => handleSort(\"tasksCount\")}\n                    className=\"flex items-center gap-2 hover-elevate active-elevate-2 -mx-2 px-2 py-1 rounded-md transition-colors\"\n                    data-testid=\"sort-tasks\"\n                  >\n                    Tasks\n                    <SortIcon field=\"tasksCount\" />\n                  </button>\n                </TableHead>\n                <TableHead>\n                  <button\n                    onClick={() => handleSort(\"aisCount\")}\n                    className=\"flex items-center gap-2 hover-elevate active-elevate-2 -mx-2 px-2 py-1 rounded-md transition-colors\"\n                    data-testid=\"sort-ais\"\n                  >\n                    AIs\n                    <SortIcon field=\"aisCount\" />\n                  </button>\n                </TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredAndSortedJobs.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={5} className=\"text-center text-muted-foreground py-8\">\n                    No jobs found matching your search\n                  </TableCell>\n                </TableRow>\n              ) : (\n                filteredAndSortedJobs.map((job, index) => (\n                  <TableRow \n                    key={job.id} \n                    data-testid={`row-job-${job.id}`}\n                    onClick={() => handleJobClick(job.title)}\n                    className=\"cursor-pointer hover-elevate\"\n                  >\n                    <TableCell className=\"font-medium text-muted-foreground\">\n                      {index + 1}\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\" data-testid={`text-job-title-${job.id}`}>\n                          {job.title}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground mt-1\">\n                          {job.description}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        variant=\"outline\"\n                        className={getImpactColor(job.aiImpact)}\n                        data-testid={`badge-impact-${job.id}`}\n                      >\n                        {job.aiImpact}%\n                      </Badge>\n                    </TableCell>\n                    <TableCell data-testid={`text-tasks-${job.id}`}>\n                      {job.tasksCount}\n                    </TableCell>\n                    <TableCell data-testid={`text-ais-${job.id}`}>\n                      {job.aisCount}\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </div>\n\n        <div className=\"text-sm text-muted-foreground\">\n          Showing {filteredAndSortedJobs.length} of {MOCK_JOBS.length} jobs\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9270},"client/src/pages/Cart.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  ShoppingCart, \n  Trash2, \n  Building2, \n  User, \n  AlertTriangle,\n  CheckCircle2,\n  ShoppingBag,\n  ChevronDown,\n  ChevronUp,\n  Clock\n} from \"lucide-react\";\nimport { CartItem, getCartFromStorage, removeFromCart, clearCart, updateCartItemCredentials } from \"@/lib/cartData\";\nimport { Payer, Transaction } from \"@/lib/payersData\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\n\nexport default function Cart() {\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n  const [payers, setPayers] = useState<Payer[]>([]);\n  const [selectedPayerId, setSelectedPayerId] = useState<string>(\"\");\n  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [purchasedItemsCount, setPurchasedItemsCount] = useState(0);\n  const [purchasedTotal, setPurchasedTotal] = useState(0);\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    setCartItems(getCartFromStorage());\n    \n    const stored = localStorage.getItem(\"payers\");\n    if (stored) {\n      const payersData = JSON.parse(stored);\n      setPayers(payersData);\n      if (payersData.length > 0) {\n        setSelectedPayerId(payersData[0].id);\n      }\n    }\n  }, []);\n\n  const handleRemoveItem = (itemId: string) => {\n    removeFromCart(itemId);\n    setCartItems(getCartFromStorage());\n    toast({\n      title: \"Удалено из корзины\",\n      description: \"Сервис успешно удален из корзины\",\n    });\n  };\n\n  const toggleExpanded = (itemId: string) => {\n    const newExpanded = new Set(expandedItems);\n    if (newExpanded.has(itemId)) {\n      newExpanded.delete(itemId);\n    } else {\n      newExpanded.add(itemId);\n    }\n    setExpandedItems(newExpanded);\n  };\n\n  const handleCredentialsUpdate = (\n    itemId: string,\n    field: \"login\" | \"password\" | \"paymentUrl\",\n    value: string\n  ) => {\n    const item = cartItems.find(i => i.id === itemId);\n    if (!item) return;\n\n    const credentials = {\n      login: field === \"login\" ? value : item.login,\n      password: field === \"password\" ? value : item.password,\n      paymentUrl: field === \"paymentUrl\" ? value : item.paymentUrl,\n    };\n\n    updateCartItemCredentials(itemId, credentials);\n    setCartItems(getCartFromStorage());\n  };\n\n  const totalPrice = cartItems.reduce((sum, item) => sum + item.price, 0);\n  const selectedPayer = payers.find(p => p.id === selectedPayerId);\n  const hasInsufficientFunds = selectedPayer ? selectedPayer.balance < totalPrice : true;\n\n  const handleCheckout = () => {\n    if (!selectedPayer) {\n      toast({\n        title: \"Выберите плательщика\",\n        description: \"Необходимо выбрать плательщика для оплаты\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (hasInsufficientFunds) {\n      toast({\n        title: \"Недостаточно средств\",\n        description: \"У выбранного плательщика недостаточно средств\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Save purchase info for success screen\n    setPurchasedItemsCount(cartItems.length);\n    setPurchasedTotal(totalPrice);\n\n    // Process all purchases\n    cartItems.forEach(item => {\n      const purchase = {\n        id: Date.now().toString() + Math.random(),\n        serviceId: item.serviceId,\n        planName: item.planName,\n        price: item.price,\n        purchaseDate: new Date().toISOString(),\n        status: \"active\" as const,\n        billingCycle: item.billingCycle,\n        payerId: selectedPayerId,\n        login: item.login,\n        password: item.password,\n        paymentUrl: item.paymentUrl,\n      };\n\n      const existing = localStorage.getItem(\"userPurchases\");\n      const purchases = existing ? JSON.parse(existing) : [];\n      purchases.push(purchase);\n      localStorage.setItem(\"userPurchases\", JSON.stringify(purchases));\n\n      // Add transaction\n      const newTransaction: Transaction = {\n        id: Date.now().toString() + Math.random(),\n        payerId: selectedPayerId,\n        date: new Date().toISOString(),\n        type: \"purchase\",\n        amount: item.price,\n        comment: `Покупка ${item.serviceName} - ${item.planName}`,\n        serviceId: item.serviceId,\n        serviceName: item.serviceName,\n      };\n      const existingTransactions = localStorage.getItem(\"transactions\");\n      const transactions = existingTransactions ? JSON.parse(existingTransactions) : [];\n      transactions.push(newTransaction);\n      localStorage.setItem(\"transactions\", JSON.stringify(transactions));\n    });\n\n    // Deduct total from payer balance\n    const updatedPayers = payers.map(p => \n      p.id === selectedPayerId ? { ...p, balance: p.balance - totalPrice } : p\n    );\n    setPayers(updatedPayers);\n    localStorage.setItem(\"payers\", JSON.stringify(updatedPayers));\n\n    // Clear cart\n    clearCart();\n    setCartItems([]);\n\n    // Show success screen\n    setShowSuccess(true);\n  };\n\n  if (showSuccess) {\n    return (\n      <div className=\"max-w-4xl mx-auto px-6 py-8 space-y-6\">\n        <Breadcrumb>\n          <BreadcrumbList>\n            <BreadcrumbItem>\n              <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n            <BreadcrumbItem>\n              <BreadcrumbPage>Корзина</BreadcrumbPage>\n            </BreadcrumbItem>\n          </BreadcrumbList>\n        </Breadcrumb>\n\n        <div className=\"flex flex-col items-center text-center space-y-6 py-8\">\n          <div className=\"w-24 h-24 bg-green-500/10 rounded-full flex items-center justify-center\">\n            <CheckCircle2 className=\"h-16 w-16 text-green-500\" />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <h1 className=\"text-3xl font-bold\">Спасибо за ваш заказ!</h1>\n            <p className=\"text-muted-foreground max-w-md\">\n              Ваш заказ принят и находится в обработке. Вы можете проверить статус заказа в личном кабинете.\n            </p>\n          </div>\n\n          <Card className=\"bg-muted/50 w-full max-w-md\">\n            <CardContent className=\"pt-6\">\n              <div className=\"space-y-3 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Количество сервисов:</span>\n                  <span className=\"font-medium\">{purchasedItemsCount}</span>\n                </div>\n                <div className=\"flex justify-between pt-3 border-t\">\n                  <span className=\"text-muted-foreground\">Общая сумма:</span>\n                  <span className=\"font-bold text-lg\">${purchasedTotal.toFixed(2)}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-blue-500/10 border-blue-500/20 w-full max-w-md\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-start gap-3\">\n                <Clock className=\"h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0\" />\n                <div className=\"space-y-1 text-left\">\n                  <h4 className=\"font-semibold text-blue-500\">Срок обработки заказа</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Обработка вашего заказа занимает от 1 до 7 дней. После активации сервисов вы получите уведомление, и они отобразятся в вашем личном кабинете.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex gap-3 pt-4 w-full max-w-md\">\n            <Button \n              variant=\"outline\" \n              className=\"flex-1\" \n              onClick={() => setLocation(\"/\")}\n              data-testid=\"button-continue-browsing\"\n            >\n              Продолжить просмотр\n            </Button>\n            <Button \n              className=\"flex-1\" \n              onClick={() => setLocation(\"/account\")}\n              data-testid=\"button-view-account\"\n            >\n              Личный кабинет\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-6\">\n        <Breadcrumb>\n          <BreadcrumbList>\n            <BreadcrumbItem>\n              <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n            <BreadcrumbItem>\n              <BreadcrumbPage>Корзина</BreadcrumbPage>\n            </BreadcrumbItem>\n          </BreadcrumbList>\n        </Breadcrumb>\n\n        <div className=\"text-center py-16\">\n          <ShoppingCart className=\"h-24 w-24 mx-auto text-muted-foreground mb-4\" />\n          <h2 className=\"text-2xl font-bold mb-2\">Корзина пуста</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Добавьте сервисы в корзину чтобы оформить покупку\n          </p>\n          <Button onClick={() => setLocation(\"/\")} data-testid=\"button-browse-services\">\n            Перейти к каталогу\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-6\">\n      <Breadcrumb>\n        <BreadcrumbList>\n          <BreadcrumbItem>\n            <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n          </BreadcrumbItem>\n          <BreadcrumbSeparator />\n          <BreadcrumbItem>\n            <BreadcrumbPage>Корзина</BreadcrumbPage>\n          </BreadcrumbItem>\n        </BreadcrumbList>\n      </Breadcrumb>\n\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-3\">\n            <ShoppingCart className=\"h-8 w-8\" />\n            Корзина\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            {cartItems.length} {cartItems.length === 1 ? \"сервис\" : \"сервисов\"} в корзине\n          </p>\n        </div>\n        <Button \n          variant=\"outline\" \n          onClick={() => {\n            clearCart();\n            setCartItems([]);\n            toast({ title: \"Корзина очищена\" });\n          }}\n          data-testid=\"button-clear-cart\"\n        >\n          Очистить корзину\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2 space-y-4\">\n          {cartItems.map((item) => {\n            const isExpanded = expandedItems.has(item.id);\n            return (\n              <Card key={item.id} className=\"hover-elevate\" data-testid={`cart-item-${item.id}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between gap-4\">\n                    <div className=\"flex items-start gap-4 flex-1\">\n                      {item.serviceLogoUrl ? (\n                        <img \n                          src={item.serviceLogoUrl} \n                          alt={item.serviceName}\n                          className=\"w-16 h-16 object-contain rounded-md\"\n                        />\n                      ) : (\n                        <div \n                          className=\"w-16 h-16 rounded-md flex items-center justify-center\"\n                          style={{ backgroundColor: item.serviceColor }}\n                        >\n                          <span className=\"text-white font-bold text-xl\">\n                            {item.serviceName.charAt(0)}\n                          </span>\n                        </div>\n                      )}\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-lg\" data-testid={`text-service-name-${item.id}`}>\n                          {item.serviceName}\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {item.planName}\n                        </p>\n                        <div className=\"flex items-center gap-2 mt-2\">\n                          <Badge variant=\"secondary\" className=\"capitalize\">\n                            {item.billingCycle === \"monthly\" ? \"Ежемесячно\" : \"Ежегодно\"}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right flex flex-col items-end gap-3\">\n                      <p className=\"text-2xl font-bold\" data-testid={`text-price-${item.id}`}>\n                        ${item.price.toFixed(2)}\n                      </p>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => toggleExpanded(item.id)}\n                          data-testid={`button-toggle-credentials-${item.id}`}\n                        >\n                          {isExpanded ? (\n                            <ChevronUp className=\"h-4 w-4\" />\n                          ) : (\n                            <ChevronDown className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleRemoveItem(item.id)}\n                          data-testid={`button-remove-${item.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  {isExpanded && (\n                    <div className=\"mt-6 pt-6 border-t space-y-4\">\n                      <h4 className=\"font-semibold text-sm\">Информация о доступе</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor={`login-${item.id}`} className=\"text-xs\">\n                            Логин в сервисе\n                          </Label>\n                          <Input\n                            id={`login-${item.id}`}\n                            type=\"text\"\n                            placeholder=\"username или email\"\n                            value={item.login || \"\"}\n                            onChange={(e) => handleCredentialsUpdate(item.id, \"login\", e.target.value)}\n                            data-testid={`input-login-${item.id}`}\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor={`password-${item.id}`} className=\"text-xs\">\n                            Пароль от сервиса\n                          </Label>\n                          <Input\n                            id={`password-${item.id}`}\n                            type=\"password\"\n                            placeholder=\"Пароль\"\n                            value={item.password || \"\"}\n                            onChange={(e) => handleCredentialsUpdate(item.id, \"password\", e.target.value)}\n                            data-testid={`input-password-${item.id}`}\n                          />\n                        </div>\n                        <div className=\"space-y-2 md:col-span-2\">\n                          <Label htmlFor={`payment-url-${item.id}`} className=\"text-xs\">\n                            Ссылка на оплату сервиса\n                          </Label>\n                          <Input\n                            id={`payment-url-${item.id}`}\n                            type=\"url\"\n                            placeholder=\"https://...\"\n                            value={item.paymentUrl || \"\"}\n                            onChange={(e) => handleCredentialsUpdate(item.id, \"paymentUrl\", e.target.value)}\n                            data-testid={`input-payment-url-${item.id}`}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"lg:col-span-1\">\n          <Card className=\"sticky top-24\">\n            <CardHeader>\n              <h3 className=\"text-xl font-semibold\">Оформление заказа</h3>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Товаров:</span>\n                  <span className=\"font-semibold\">{cartItems.length}</span>\n                </div>\n                <div className=\"flex justify-between pt-3 border-t\">\n                  <span className=\"font-semibold\">Итого:</span>\n                  <span className=\"text-2xl font-bold\" data-testid=\"text-total-price\">\n                    ${totalPrice.toFixed(2)}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <label className=\"text-sm font-medium\">Плательщик</label>\n                {payers.length > 0 ? (\n                  <>\n                    <Select value={selectedPayerId} onValueChange={setSelectedPayerId}>\n                      <SelectTrigger data-testid=\"select-cart-payer\">\n                        <SelectValue placeholder=\"Выберите плательщика\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {payers.map((payer) => (\n                          <SelectItem key={payer.id} value={payer.id}>\n                            <div className=\"flex items-center gap-2\">\n                              {payer.type === \"company\" ? (\n                                <Building2 className=\"h-4 w-4\" />\n                              ) : (\n                                <User className=\"h-4 w-4\" />\n                              )}\n                              <span>\n                                {payer.type === \"company\" ? payer.companyName : `${payer.firstName} ${payer.lastName}`}\n                              </span>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    \n                    {selectedPayer && (\n                      <div className=\"p-4 border border-border rounded-md space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-muted-foreground\">Баланс:</span>\n                          <span className=\"font-semibold\">${selectedPayer.balance.toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex items-center justify-between pt-2 border-t\">\n                          <span className=\"text-sm text-muted-foreground\">После оплаты:</span>\n                          <span className={`font-semibold ${hasInsufficientFunds ? 'text-destructive' : 'text-green-500'}`}>\n                            ${(selectedPayer.balance - totalPrice).toFixed(2)}\n                          </span>\n                        </div>\n                        \n                        {hasInsufficientFunds && (\n                          <div className=\"flex items-start gap-2 p-3 bg-destructive/10 border border-destructive/20 rounded-md mt-3\">\n                            <AlertTriangle className=\"h-4 w-4 text-destructive mt-0.5 flex-shrink-0\" />\n                            <div>\n                              <p className=\"text-sm font-medium text-destructive\">Недостаточно средств</p>\n                              <p className=\"text-xs text-destructive/80 mt-1\">\n                                Не хватает ${(totalPrice - selectedPayer.balance).toFixed(2)}\n                              </p>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </>\n                ) : (\n                  <div className=\"p-4 bg-muted rounded-md text-center\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Нет плательщиков. <a href=\"/finances\" className=\"text-primary underline\">Создать</a>\n                    </p>\n                  </div>\n                )}\n              </div>\n\n              <Button \n                className=\"w-full gap-2\" \n                size=\"lg\"\n                disabled={hasInsufficientFunds || !selectedPayer}\n                onClick={handleCheckout}\n                data-testid=\"button-checkout\"\n              >\n                <ShoppingBag className=\"h-5 w-5\" />\n                Оплатить ${totalPrice.toFixed(2)}\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22099},"client/src/components/PurchaseDialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, ShoppingBag, CheckCircle2, CreditCard, Building2, User, AlertTriangle, Info, Clock, Smartphone, Wallet, FileText, Download } from \"lucide-react\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { Payer, Transaction } from \"@/lib/payersData\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface PricingTier {\n  name: string;\n  price: string;\n  features: string[];\n}\n\ninterface PurchaseDialogProps {\n  service: {\n    id: string;\n    name: string;\n    logoUrl?: string;\n    color: string;\n    pricingTiers: PricingTier[];\n  };\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  trigger?: React.ReactNode;\n}\n\nexport default function PurchaseDialog({ service, open: externalOpen, onOpenChange: externalOnOpenChange, trigger }: PurchaseDialogProps) {\n  const [internalOpen, setInternalOpen] = useState(false);\n  const open = externalOpen !== undefined ? externalOpen : internalOpen;\n  const setOpen = externalOnOpenChange || setInternalOpen;\n  const [selectedPlan, setSelectedPlan] = useState<number>(1); // Default to middle tier\n  const [billingCycle, setBillingCycle] = useState<\"monthly\" | \"yearly\">(\"monthly\");\n  const [step, setStep] = useState<\"select\" | \"confirm\" | \"payment\" | \"success\">(\"select\");\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [payers, setPayers] = useState<Payer[]>([]);\n  const [selectedPayerId, setSelectedPayerId] = useState<string>(\"\");\n  const [login, setLogin] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [paymentUrl, setPaymentUrl] = useState(\"\");\n  const [topUpAmount, setTopUpAmount] = useState<string>(\"\");\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>(\"card\");\n\n  useEffect(() => {\n    if (open) {\n      const stored = localStorage.getItem(\"payers\");\n      if (stored) {\n        const payersData = JSON.parse(stored);\n        setPayers(payersData);\n        if (payersData.length > 0 && !selectedPayerId) {\n          setSelectedPayerId(payersData[0].id);\n        }\n      }\n    }\n  }, [open]);\n\n  const selectedPayer = payers.find(p => p.id === selectedPayerId);\n  const tier = service.pricingTiers[selectedPlan];\n  const priceValue = parseFloat(tier.price.replace(/[^0-9.]/g, '')) || 0;\n  const hasInsufficientFunds = selectedPayer ? selectedPayer.balance < priceValue : true;\n\n  const handleConfirmPurchase = () => {\n    if (!selectedPayer) {\n      toast({\n        title: \"Выберите плательщика\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // All payers go to payment screen\n    setStep(\"payment\");\n  };\n\n  const generateInvoice = () => {\n    if (!selectedPayer || selectedPayer.type !== \"company\") return \"\";\n    \n    const invoiceData = `\nСЧЕТ НА ОПЛАТУ №${Date.now()}\nот ${new Date().toLocaleDateString('ru-RU')}\n\nПлательщик: ${selectedPayer.companyName}\nИНН: ${selectedPayer.inn || \"\"}\nКПП: ${selectedPayer.kpp || \"\"}\n\nУслуга: ${service.name} - ${tier.name}\nПериод оплаты: ${billingCycle === \"monthly\" ? \"Ежемесячно\" : \"Ежегодно\"}\nСтоимость: ${priceValue} ₽\n\nВсего к оплате: ${priceValue} ₽\n    `.trim();\n    \n    const blob = new Blob([invoiceData], { type: 'text/plain;charset=utf-8' });\n    const url = URL.createObjectURL(blob);\n    return url;\n  };\n\n  const completePurchase = () => {\n    if (!selectedPayer) return;\n\n    let invoiceUrl = undefined;\n    let purchaseStatus: \"active\" | \"pending_payment\" = \"active\";\n    \n    if (selectedPaymentMethod === \"invoice\") {\n      invoiceUrl = generateInvoice();\n      purchaseStatus = \"pending_payment\";\n    }\n\n    const purchase = {\n      id: Date.now().toString(),\n      serviceId: service.id,\n      planName: tier.name,\n      price: priceValue,\n      purchaseDate: new Date().toISOString(),\n      status: purchaseStatus,\n      billingCycle: billingCycle,\n      payerId: selectedPayerId,\n      paymentMethod: selectedPaymentMethod,\n      invoiceUrl,\n      login: login || undefined,\n      password: password || undefined,\n      paymentUrl: paymentUrl || undefined,\n    };\n\n    const existing = localStorage.getItem(\"userPurchases\");\n    const purchases = existing ? JSON.parse(existing) : [];\n    purchases.push(purchase);\n    localStorage.setItem(\"userPurchases\", JSON.stringify(purchases));\n\n    // Deduct from payer balance\n    const updatedPayers = payers.map(p => \n      p.id === selectedPayerId ? { ...p, balance: p.balance - priceValue } : p\n    );\n    setPayers(updatedPayers);\n    localStorage.setItem(\"payers\", JSON.stringify(updatedPayers));\n\n    // Add transaction\n    const newTransaction: Transaction = {\n      id: Date.now().toString(),\n      payerId: selectedPayerId,\n      date: new Date().toISOString(),\n      type: \"purchase\",\n      amount: priceValue,\n      comment: `Покупка ${service.name} - ${tier.name}`,\n      serviceId: service.id,\n      serviceName: service.name,\n    };\n    const existingTransactions = localStorage.getItem(\"transactions\");\n    const transactions = existingTransactions ? JSON.parse(existingTransactions) : [];\n    transactions.push(newTransaction);\n    localStorage.setItem(\"transactions\", JSON.stringify(transactions));\n\n    setStep(\"success\");\n    \n    toast({\n      title: \"Purchase successful!\",\n      description: `You've subscribed to ${service.name} - ${tier.name}`,\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setTimeout(() => {\n      setStep(\"select\");\n      setSelectedPlan(1);\n      setBillingCycle(\"monthly\");\n      setLogin(\"\");\n      setPassword(\"\");\n      setPaymentUrl(\"\");\n    }, 200);\n  };\n\n  const handleViewAccount = () => {\n    handleClose();\n    setLocation(\"/account\");\n  };\n\n  const selectedTier = service.pricingTiers[selectedPlan];\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      {trigger ? (\n        <DialogTrigger asChild>\n          {trigger}\n        </DialogTrigger>\n      ) : externalOpen === undefined ? (\n        <DialogTrigger asChild>\n          <Button \n            size=\"lg\" \n            className=\"gap-2\"\n            data-testid=\"button-purchase-service\"\n          >\n            <ShoppingBag className=\"h-5 w-5\" />\n            Subscribe Now\n          </Button>\n        </DialogTrigger>\n      ) : null}\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        {step === \"select\" && (\n          <>\n            <DialogHeader>\n              <div className=\"flex items-center gap-4 mb-2\">\n                {service.logoUrl ? (\n                  <img \n                    src={service.logoUrl} \n                    alt={service.name}\n                    className=\"w-12 h-12 object-contain rounded-md\"\n                  />\n                ) : (\n                  <div \n                    className=\"w-12 h-12 rounded-md flex items-center justify-center\"\n                    style={{ backgroundColor: service.color }}\n                  >\n                    <span className=\"text-white font-bold text-xl\">\n                      {service.name.charAt(0)}\n                    </span>\n                  </div>\n                )}\n                <DialogTitle className=\"text-2xl\">Subscribe to {service.name}</DialogTitle>\n              </div>\n              <DialogDescription>\n                Choose your plan and billing cycle to get started\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-6 mt-6\">\n              <div className=\"flex items-center justify-center gap-2 p-1 bg-muted rounded-md w-fit mx-auto\">\n                <Button\n                  variant={billingCycle === \"monthly\" ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setBillingCycle(\"monthly\")}\n                  data-testid=\"button-billing-monthly\"\n                >\n                  Monthly\n                </Button>\n                <Button\n                  variant={billingCycle === \"yearly\" ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setBillingCycle(\"yearly\")}\n                  data-testid=\"button-billing-yearly\"\n                >\n                  Yearly\n                  <Badge variant=\"secondary\" className=\"ml-2\">Save 20%</Badge>\n                </Button>\n              </div>\n\n              <RadioGroup value={selectedPlan.toString()} onValueChange={(v) => setSelectedPlan(parseInt(v))}>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {service.pricingTiers.map((tier, index) => (\n                    <Card \n                      key={index} \n                      className={`cursor-pointer transition-all ${\n                        selectedPlan === index ? 'border-primary ring-2 ring-primary/20' : 'hover-elevate'\n                      }`}\n                      onClick={() => setSelectedPlan(index)}\n                      data-testid={`card-plan-${index}`}\n                    >\n                      <CardHeader className=\"pb-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"font-semibold text-lg\">{tier.name}</h3>\n                          <RadioGroupItem value={index.toString()} id={`plan-${index}`} />\n                        </div>\n                        <div className=\"flex items-baseline gap-1\">\n                          <span className=\"text-3xl font-bold\">{tier.price}</span>\n                          <span className=\"text-muted-foreground text-sm\">\n                            /{billingCycle === \"monthly\" ? \"mo\" : \"yr\"}\n                          </span>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-2\">\n                        {tier.features.slice(0, 4).map((feature, idx) => (\n                          <div key={idx} className=\"flex items-start gap-2\">\n                            <Check className=\"h-4 w-4 text-primary mt-0.5 flex-shrink-0\" />\n                            <span className=\"text-sm text-muted-foreground\">{feature}</span>\n                          </div>\n                        ))}\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </RadioGroup>\n\n              <div className=\"flex justify-end gap-3 pt-4 border-t\">\n                <Button variant=\"outline\" onClick={handleClose} data-testid=\"button-cancel-purchase\">\n                  Cancel\n                </Button>\n                <Button onClick={() => setStep(\"confirm\")} data-testid=\"button-continue-purchase\">\n                  Continue\n                </Button>\n              </div>\n            </div>\n          </>\n        )}\n\n        {step === \"confirm\" && (\n          <>\n            <DialogHeader>\n              <DialogTitle className=\"text-2xl\">Confirm Your Purchase</DialogTitle>\n              <DialogDescription>\n                Review your subscription details before confirming\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-6 mt-6\">\n              <Card>\n                <CardContent className=\"pt-6 space-y-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-4\">\n                      {service.logoUrl ? (\n                        <img \n                          src={service.logoUrl} \n                          alt={service.name}\n                          className=\"w-16 h-16 object-contain rounded-md\"\n                        />\n                      ) : (\n                        <div \n                          className=\"w-16 h-16 rounded-md flex items-center justify-center\"\n                          style={{ backgroundColor: service.color }}\n                        >\n                          <span className=\"text-white font-bold text-2xl\">\n                            {service.name.charAt(0)}\n                          </span>\n                        </div>\n                      )}\n                      <div>\n                        <h3 className=\"font-semibold text-lg\">{service.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{selectedTier.name} Plan</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-2xl font-bold\">{selectedTier.price}</p>\n                      <p className=\"text-sm text-muted-foreground capitalize\">\n                        Billed {billingCycle}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"pt-4 border-t\">\n                    <h4 className=\"font-semibold mb-3\">Included Features:</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {selectedTier.features.map((feature, idx) => (\n                        <div key={idx} className=\"flex items-start gap-2\">\n                          <Check className=\"h-4 w-4 text-primary mt-0.5 flex-shrink-0\" />\n                          <span className=\"text-sm text-muted-foreground\">{feature}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center gap-2\">\n                    <Info className=\"h-5 w-5\" />\n                    <h3 className=\"font-semibold\">Информация о доступе</h3>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Логин и пароль вводятся вручную. Рекомендуем запросить это у данного сервиса, или создать отдельный аккаунт для него.\n                  </p>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"service-login\">Логин в сервисе</Label>\n                    <Input\n                      id=\"service-login\"\n                      type=\"text\"\n                      placeholder=\"username или email\"\n                      value={login}\n                      onChange={(e) => setLogin(e.target.value)}\n                      data-testid=\"input-service-login\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"service-password\">Пароль от сервиса</Label>\n                    <Input\n                      id=\"service-password\"\n                      type=\"password\"\n                      placeholder=\"Пароль\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      data-testid=\"input-service-password\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"payment-url\">Ссылка на оплату сервиса</Label>\n                    <Input\n                      id=\"payment-url\"\n                      type=\"url\"\n                      placeholder=\"https://...\"\n                      value={paymentUrl}\n                      onChange={(e) => setPaymentUrl(e.target.value)}\n                      data-testid=\"input-payment-url\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center gap-2\">\n                    <CreditCard className=\"h-5 w-5\" />\n                    <h3 className=\"font-semibold\">Плательщик</h3>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {payers.length > 0 ? (\n                    <>\n                      <Select value={selectedPayerId} onValueChange={setSelectedPayerId}>\n                        <SelectTrigger data-testid=\"select-payer\">\n                          <SelectValue placeholder=\"Выберите плательщика\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {payers.map((payer) => (\n                            <SelectItem key={payer.id} value={payer.id}>\n                              <div className=\"flex items-center gap-2\">\n                                {payer.type === \"company\" ? (\n                                  <Building2 className=\"h-4 w-4\" />\n                                ) : (\n                                  <User className=\"h-4 w-4\" />\n                                )}\n                                <span>\n                                  {payer.type === \"company\" ? payer.companyName : `${payer.lastName} ${payer.firstName}`}\n                                </span>\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      \n                      {selectedPayer && (\n                        <div className=\"p-4 border border-border rounded-md space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-muted-foreground\">Текущий баланс:</span>\n                            <span className=\"font-semibold\">${selectedPayer.balance.toFixed(2)}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-muted-foreground\">Стоимость:</span>\n                            <span className=\"font-semibold\">${priceValue.toFixed(2)}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between pt-2 border-t\">\n                            <span className=\"text-sm text-muted-foreground\">Остаток после покупки:</span>\n                            <span className={`font-semibold ${hasInsufficientFunds ? 'text-destructive' : ''}`}>\n                              ${(selectedPayer.balance - priceValue).toFixed(2)}\n                            </span>\n                          </div>\n                          \n                          {hasInsufficientFunds && (\n                            <div className=\"flex items-start gap-2 p-3 bg-destructive/10 border border-destructive/20 rounded-md mt-3\">\n                              <AlertTriangle className=\"h-4 w-4 text-destructive mt-0.5 flex-shrink-0\" />\n                              <div>\n                                <p className=\"text-sm font-medium text-destructive\">Недостаточно средств</p>\n                                <p className=\"text-xs text-destructive/80 mt-1\">\n                                  Пополните баланс плательщика на ${(priceValue - selectedPayer.balance).toFixed(2)} или выберите другого плательщика\n                                </p>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    <div className=\"p-4 bg-muted rounded-md text-center\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        У вас пока нет плательщиков. Создайте плательщика в разделе <a href=\"/finances\" className=\"text-primary underline\">Финансы</a>\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <div className=\"flex justify-end gap-3 pt-4 border-t\">\n                <Button variant=\"outline\" onClick={() => setStep(\"select\")} data-testid=\"button-back-purchase\">\n                  Back\n                </Button>\n                <Button \n                  onClick={handleConfirmPurchase} \n                  disabled={!selectedPayer}\n                  data-testid=\"button-confirm-purchase\"\n                >\n                  Confirm Purchase\n                </Button>\n              </div>\n            </div>\n          </>\n        )}\n\n        {step === \"payment\" && selectedPayer && (\n          <>\n            <DialogHeader>\n              <DialogTitle className=\"text-2xl\">Пополнить счет</DialogTitle>\n              <DialogDescription>\n                Выберите способ пополнения баланса для оплаты\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-6 mt-6\">\n              {/* Payer Info */}\n              <Card className=\"bg-blue-500/5 border-blue-500/20\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 bg-blue-500/10 rounded-full flex items-center justify-center\">\n                      <User className=\"h-5 w-5 text-blue-500\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold\">\n                        {selectedPayer.type === \"individual\" \n                          ? `${selectedPayer.lastName} ${selectedPayer.firstName}`\n                          : selectedPayer.companyName\n                        }\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {selectedPayer.type === \"individual\" ? \"Физическое лицо\" : \"Юридическое лицо\"}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"mt-4 pt-4 border-t\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Текущий баланс:</span>\n                      <span className=\"font-semibold\">{selectedPayer.balance.toFixed(2)} ₽</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Top-up Amount - Only for Individual */}\n              {selectedPayer.type === \"individual\" && (\n                <Card>\n                  <CardHeader>\n                    <h3 className=\"font-semibold\">Пополнить счет на:</h3>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <Input\n                      type=\"number\"\n                      placeholder=\"2000\"\n                      value={topUpAmount}\n                      onChange={(e) => setTopUpAmount(e.target.value)}\n                      className=\"text-lg\"\n                      data-testid=\"input-topup-amount\"\n                    />\n                    \n                    <div className=\"text-sm text-muted-foreground\">Быстрый выбор суммы:</div>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {[500, 1000, 2000, 5000, 10000].map((amount) => (\n                        <Button\n                          key={amount}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setTopUpAmount(amount.toString())}\n                          data-testid={`button-amount-${amount}`}\n                        >\n                          {amount} ₽\n                        </Button>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Payment Methods */}\n              <Card>\n                <CardHeader>\n                  <h3 className=\"font-semibold\">Выберите способ оплаты</h3>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {selectedPayer.type === \"company\" ? (\n                    <>\n                      <div\n                        className={`p-4 border rounded-lg cursor-pointer transition-all ${\n                          selectedPaymentMethod === \"card\" ? \"border-primary bg-primary/5\" : \"hover-elevate\"\n                        }`}\n                        onClick={() => setSelectedPaymentMethod(\"card\")}\n                        data-testid=\"payment-method-card\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <CreditCard className=\"h-5 w-5 text-primary\" />\n                          <div>\n                            <h4 className=\"font-medium\">Корпоративная карта</h4>\n                            <p className=\"text-sm text-muted-foreground\">Карта компании</p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div\n                        className={`p-4 border rounded-lg cursor-pointer transition-all ${\n                          selectedPaymentMethod === \"invoice\" ? \"border-primary bg-primary/5\" : \"hover-elevate\"\n                        }`}\n                        onClick={() => setSelectedPaymentMethod(\"invoice\")}\n                        data-testid=\"payment-method-invoice\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <FileText className=\"h-5 w-5 text-primary\" />\n                          <div>\n                            <h4 className=\"font-medium\">Оплата по счету</h4>\n                            <p className=\"text-sm text-muted-foreground\">Банковский счет организации</p>\n                          </div>\n                        </div>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div\n                        className={`p-4 border rounded-lg cursor-pointer transition-all ${\n                          selectedPaymentMethod === \"card\" ? \"border-primary bg-primary/5\" : \"hover-elevate\"\n                        }`}\n                        onClick={() => setSelectedPaymentMethod(\"card\")}\n                        data-testid=\"payment-method-card\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <CreditCard className=\"h-5 w-5 text-primary\" />\n                          <div>\n                            <h4 className=\"font-medium\">Банковские карты</h4>\n                            <p className=\"text-sm text-muted-foreground\">Mir, Visa, Mastercard</p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div\n                        className={`p-4 border rounded-lg cursor-pointer transition-all ${\n                          selectedPaymentMethod === \"yumoney\" ? \"border-primary bg-primary/5\" : \"hover-elevate\"\n                        }`}\n                        onClick={() => setSelectedPaymentMethod(\"yumoney\")}\n                        data-testid=\"payment-method-yumoney\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <Wallet className=\"h-5 w-5 text-primary\" />\n                          <div>\n                            <h4 className=\"font-medium\">ЮMoney</h4>\n                            <p className=\"text-sm text-muted-foreground\">Электронный кошелек</p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div\n                        className={`p-4 border rounded-lg cursor-pointer transition-all ${\n                          selectedPaymentMethod === \"sbp\" ? \"border-primary bg-primary/5\" : \"hover-elevate\"\n                        }`}\n                        onClick={() => setSelectedPaymentMethod(\"sbp\")}\n                        data-testid=\"payment-method-sbp\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <Smartphone className=\"h-5 w-5 text-primary\" />\n                          <div>\n                            <h4 className=\"font-medium\">СБП (Система быстрых платежей)</h4>\n                            <p className=\"text-sm text-muted-foreground\">Перевод по номеру телефона</p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div\n                        className={`p-4 border rounded-lg cursor-pointer transition-all ${\n                          selectedPaymentMethod === \"sberpay\" ? \"border-primary bg-primary/5\" : \"hover-elevate\"\n                        }`}\n                        onClick={() => setSelectedPaymentMethod(\"sberpay\")}\n                        data-testid=\"payment-method-sberpay\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <Building2 className=\"h-5 w-5 text-primary\" />\n                          <div>\n                            <h4 className=\"font-medium\">SberPay</h4>\n                            <p className=\"text-sm text-muted-foreground\">Оплата через Сбербанк</p>\n                          </div>\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Actions */}\n              <div className=\"space-y-3 pt-4 border-t\">\n                {selectedPaymentMethod === \"invoice\" && selectedPayer.type === \"company\" ? (\n                  <Button\n                    className=\"w-full\"\n                    onClick={() => {\n                      completePurchase();\n                      const invoiceUrl = generateInvoice();\n                      if (invoiceUrl) {\n                        const link = document.createElement('a');\n                        link.href = invoiceUrl;\n                        link.download = `Счет_${Date.now()}.txt`;\n                        link.click();\n                      }\n                    }}\n                    data-testid=\"button-download-invoice\"\n                  >\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Скачать счет и оформить заказ\n                  </Button>\n                ) : (\n                  <Button\n                    className=\"w-full\"\n                    onClick={completePurchase}\n                    disabled={hasInsufficientFunds}\n                    data-testid=\"button-pay-from-balance\"\n                  >\n                    Списать с баланса\n                  </Button>\n                )}\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  onClick={() => setStep(\"confirm\")}\n                  data-testid=\"button-back-to-confirm\"\n                >\n                  Назад\n                </Button>\n              </div>\n            </div>\n          </>\n        )}\n\n        {step === \"success\" && (\n          <>\n            <DialogHeader>\n              <div className=\"flex flex-col items-center text-center space-y-4 py-6\">\n                <div className=\"w-20 h-20 bg-green-500/10 rounded-full flex items-center justify-center\">\n                  <CheckCircle2 className=\"h-12 w-12 text-green-500\" />\n                </div>\n                <DialogTitle className=\"text-2xl\">Спасибо за ваш заказ!</DialogTitle>\n                <DialogDescription className=\"text-base max-w-md\">\n                  Ваш заказ принят и находится в обработке. Вы можете проверить статус заказа в личном кабинете.\n                </DialogDescription>\n              </div>\n            </DialogHeader>\n\n            <div className=\"space-y-4 mt-4\">\n              <Card className=\"bg-muted/50\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Сервис:</span>\n                      <span className=\"font-medium\">{service.name}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Тариф:</span>\n                      <span className=\"font-medium\">{selectedTier.name}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Период оплаты:</span>\n                      <span className=\"font-medium capitalize\">{billingCycle === \"monthly\" ? \"Ежемесячно\" : \"Ежегодно\"}</span>\n                    </div>\n                    <div className=\"flex justify-between pt-3 border-t\">\n                      <span className=\"text-muted-foreground\">Сумма:</span>\n                      <span className=\"font-bold text-lg\">{selectedTier.price}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-blue-500/10 border-blue-500/20\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-start gap-3\">\n                    <Clock className=\"h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0\" />\n                    <div className=\"space-y-1\">\n                      <h4 className=\"font-semibold text-blue-500\">Срок обработки заказа</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Обработка вашего заказа занимает от 1 до 7 дней. После активации сервиса вы получите уведомление, и сервис отобразится в вашем личном кабинете.\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"flex gap-3 pt-4\">\n                <Button variant=\"outline\" className=\"flex-1\" onClick={handleClose} data-testid=\"button-close-success\">\n                  Продолжить просмотр\n                </Button>\n                <Button className=\"flex-1\" onClick={handleViewAccount} data-testid=\"button-view-account\">\n                  Личный кабинет\n                </Button>\n              </div>\n            </div>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":35479},"client/src/components/AddPayerDialog.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Plus } from \"lucide-react\";\nimport { type Payer } from \"@/lib/payersData\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddPayerDialogProps {\n  onPayerAdded: (payer: Payer) => void;\n}\n\nexport default function AddPayerDialog({ onPayerAdded }: AddPayerDialogProps) {\n  const [open, setOpen] = useState(false);\n  const [type, setType] = useState<\"company\" | \"individual\">(\"company\");\n  const [name, setName] = useState(\"\");\n  const [balance, setBalance] = useState(\"0\");\n  const { toast } = useToast();\n\n  const handleSubmit = () => {\n    if (!name.trim()) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Введите название плательщика\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    let newPayer: Payer;\n    \n    if (type === \"company\") {\n      newPayer = {\n        id: `payer-${Date.now()}`,\n        type: \"company\",\n        companyName: name.trim(),\n        balance: parseFloat(balance) || 0,\n        services: [],\n      };\n    } else {\n      // Split full name into first and last name\n      const nameParts = name.trim().split(\" \");\n      const lastName = nameParts[0] || \"\";\n      const firstName = nameParts.slice(1).join(\" \") || \"\";\n      \n      newPayer = {\n        id: `payer-${Date.now()}`,\n        type: \"individual\",\n        firstName,\n        lastName,\n        balance: parseFloat(balance) || 0,\n        services: [],\n      };\n    }\n\n    onPayerAdded(newPayer);\n    toast({\n      title: \"Плательщик добавлен\",\n      description: `${name.trim()} успешно создан`,\n    });\n\n    setOpen(false);\n    setName(\"\");\n    setBalance(\"0\");\n    setType(\"company\");\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button className=\"gap-2\" data-testid=\"button-add-payer\">\n          <Plus className=\"h-4 w-4\" />\n          Добавить плательщика\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Добавить плательщика</DialogTitle>\n          <DialogDescription>\n            Создайте нового плательщика для управления подписками\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\">\n          <div className=\"space-y-2\">\n            <Label>Тип плательщика</Label>\n            <RadioGroup value={type} onValueChange={(v) => setType(v as \"company\" | \"individual\")}>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"company\" id=\"company\" />\n                <Label htmlFor=\"company\">Юридическое лицо</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"individual\" id=\"individual\" />\n                <Label htmlFor=\"individual\">Физическое лицо</Label>\n              </div>\n            </RadioGroup>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">\n              {type === \"company\" ? \"Название организации\" : \"ФИО\"}\n            </Label>\n            <Input\n              id=\"name\"\n              placeholder={type === \"company\" ? 'ООО \"Компания\"' : \"Иванов Иван Иванович\"}\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              data-testid=\"input-payer-name\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"balance\">Начальный баланс (₽)</Label>\n            <Input\n              id=\"balance\"\n              type=\"number\"\n              placeholder=\"0\"\n              value={balance}\n              onChange={(e) => setBalance(e.target.value)}\n              data-testid=\"input-initial-balance\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-2\">\n          <Button variant=\"outline\" onClick={() => setOpen(false)}>\n            Отмена\n          </Button>\n          <Button onClick={handleSubmit} data-testid=\"button-create-payer\">\n            Создать\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4687},"client/src/pages/Finances.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Building2, User, Plus, Wallet, CreditCard, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { MOCK_PAYERS, type Payer, type Transaction } from \"@/lib/payersData\";\nimport { MOCK_SERVICES } from \"@/lib/mockData\";\nimport AddPayerDialog from \"@/components/AddPayerDialog\";\nimport TopUpDialog from \"@/components/TopUpDialog\";\nimport WithdrawDialog from \"@/components/WithdrawDialog\";\n\nexport default function Finances() {\n  const [payers, setPayers] = useState<Payer[]>([]);\n  const [selectedPayer, setSelectedPayer] = useState<Payer | null>(null);\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [purchases, setPurchases] = useState<any[]>([]);\n\n  useEffect(() => {\n    const storedPayers = localStorage.getItem(\"payers\");\n    if (storedPayers) {\n      setPayers(JSON.parse(storedPayers));\n    } else {\n      setPayers(MOCK_PAYERS);\n      localStorage.setItem(\"payers\", JSON.stringify(MOCK_PAYERS));\n    }\n\n    const storedTransactions = localStorage.getItem(\"transactions\");\n    if (storedTransactions) {\n      setTransactions(JSON.parse(storedTransactions));\n    }\n\n    const storedPurchases = localStorage.getItem(\"userPurchases\");\n    if (storedPurchases) {\n      setPurchases(JSON.parse(storedPurchases));\n    }\n  }, []);\n\n  const getPayerServices = (payerId: string) => {\n    return purchases.filter(p => p.payerId === payerId && p.status === \"active\");\n  };\n\n  const getPayerMonthlyExpense = (payerId: string) => {\n    const payerPurchases = getPayerServices(payerId);\n    return payerPurchases\n      .filter(p => p.billingCycle === \"monthly\")\n      .reduce((sum, p) => sum + p.price, 0);\n  };\n\n  const hasSufficientFunds = (payerId: string) => {\n    const payer = payers.find(p => p.id === payerId);\n    if (!payer) return false;\n    const monthlyExpense = getPayerMonthlyExpense(payerId);\n    return payer.balance >= monthlyExpense;\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('ru-RU', {\n      style: 'decimal',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount) + ' ₽';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"text-finances-title\">\n              Финансы — AI Hunt\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Управление плательщиками и балансами\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <AddPayerDialog onPayerAdded={(payer: Payer) => {\n              const updated = [...payers, payer];\n              setPayers(updated);\n              localStorage.setItem(\"payers\", JSON.stringify(updated));\n            }} />\n            <TopUpDialog \n              payers={payers}\n              onTopUp={(payerId: string, amount: number, method: string) => {\n                const updated = payers.map(p => \n                  p.id === payerId ? { ...p, balance: p.balance + amount } : p\n                );\n                setPayers(updated);\n                localStorage.setItem(\"payers\", JSON.stringify(updated));\n\n                const newTransaction: Transaction = {\n                  id: Date.now().toString(),\n                  payerId,\n                  date: new Date().toISOString(),\n                  type: \"deposit\",\n                  amount,\n                  comment: `Пополнение через ${method}`,\n                };\n                const updatedTransactions = [...transactions, newTransaction];\n                setTransactions(updatedTransactions);\n                localStorage.setItem(\"transactions\", JSON.stringify(updatedTransactions));\n              }}\n            />\n            <WithdrawDialog\n              payers={payers}\n              onWithdraw={(payerId: string, amount: number, method: string) => {\n                const updated = payers.map(p => \n                  p.id === payerId ? { ...p, balance: p.balance - amount } : p\n                );\n                setPayers(updated);\n                localStorage.setItem(\"payers\", JSON.stringify(updated));\n\n                const newTransaction: Transaction = {\n                  id: Date.now().toString(),\n                  payerId,\n                  date: new Date().toISOString(),\n                  type: \"withdrawal\",\n                  amount,\n                  comment: `Списание через ${method}`,\n                };\n                const updatedTransactions = [...transactions, newTransaction];\n                setTransactions(updatedTransactions);\n                localStorage.setItem(\"transactions\", JSON.stringify(updatedTransactions));\n              }}\n            />\n          </div>\n        </div>\n\n        <div>\n          <h2 className=\"text-xl font-semibold mb-4\">Плательщики</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {payers.map((payer) => {\n              const monthlyExpense = getPayerMonthlyExpense(payer.id);\n              const sufficient = hasSufficientFunds(payer.id);\n              const services = getPayerServices(payer.id);\n\n              return (\n                <Card\n                  key={payer.id}\n                  className={`hover-elevate cursor-pointer transition-all ${\n                    selectedPayer?.id === payer.id ? \"ring-2 ring-primary\" : \"\"\n                  }`}\n                  onClick={() => setSelectedPayer(payer)}\n                  data-testid={`card-payer-${payer.id}`}\n                >\n                  <CardHeader className=\"space-y-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 rounded-md bg-primary/10 flex items-center justify-center\">\n                          {payer.type === \"company\" ? (\n                            <Building2 className=\"h-5 w-5 text-primary\" />\n                          ) : (\n                            <User className=\"h-5 w-5 text-primary\" />\n                          )}\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold\" data-testid={`text-payer-name-${payer.id}`}>\n                            {payer.type === \"company\" ? payer.companyName : `${payer.firstName} ${payer.lastName}`}\n                          </h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {payer.type === \"company\" ? \"Юридическое лицо\" : \"Физическое лицо\"}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Баланс:</p>\n                      <p className=\"text-2xl font-bold\" data-testid={`text-balance-${payer.id}`}>\n                        {formatCurrency(payer.balance)}\n                      </p>\n                    </div>\n                    {services.length > 0 && (\n                      <div>\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          Сервисы: {services.map(s => {\n                            const service = MOCK_SERVICES.find(ms => ms.id === s.serviceId);\n                            return service?.name || s.planName;\n                          }).join(\", \")}\n                        </p>\n                      </div>\n                    )}\n                    {monthlyExpense > 0 && (\n                      <div className={`flex items-center gap-2 p-3 rounded-md ${\n                        sufficient \n                          ? \"bg-green-500/10 text-green-500\" \n                          : \"bg-red-500/10 text-red-500\"\n                      }`}>\n                        {sufficient ? (\n                          <CheckCircle className=\"h-4 w-4\" />\n                        ) : (\n                          <AlertCircle className=\"h-4 w-4\" />\n                        )}\n                        <span className=\"text-sm\">\n                          {sufficient \n                            ? `Достаточно средств (+${formatCurrency(payer.balance - monthlyExpense)})`\n                            : `Недостаточно средств (-${formatCurrency(Math.abs(payer.balance - monthlyExpense))})`\n                          }\n                        </span>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n\n        {selectedPayer && (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold\">\n                Сервисы плательщика: {selectedPayer.type === \"company\" ? selectedPayer.companyName : `${selectedPayer.firstName} ${selectedPayer.lastName}`}\n              </h2>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setSelectedPayer(null)}\n              >\n                Скрыть\n              </Button>\n            </div>\n\n            <div className=\"space-y-3\">\n              {getPayerServices(selectedPayer.id).map((purchase) => {\n                const service = MOCK_SERVICES.find(s => s.id === purchase.serviceId);\n                return (\n                  <Card key={purchase.id} className=\"hover-elevate\">\n                    <CardContent className=\"flex items-center justify-between p-4\">\n                      <div className=\"flex items-center gap-4\">\n                        {service?.logoUrl ? (\n                          <img \n                            src={service.logoUrl} \n                            alt={service.name}\n                            className=\"w-10 h-10 object-contain rounded\"\n                          />\n                        ) : (\n                          <div className=\"w-10 h-10 bg-primary/10 rounded flex items-center justify-center\">\n                            <span className=\"text-primary font-semibold\">\n                              {purchase.planName.charAt(0)}\n                            </span>\n                          </div>\n                        )}\n                        <div>\n                          <h3 className=\"font-semibold\">\n                            {service?.name || purchase.planName}\n                          </h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {purchase.planName}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold\">\n                          {formatCurrency(purchase.price)}/мес\n                        </p>\n                        <Badge variant=\"outline\" className=\"mt-1\">\n                          Активен\n                        </Badge>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n              {getPayerServices(selectedPayer.id).length === 0 && (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  Нет активных сервисов\n                </p>\n              )}\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Транзакции</h3>\n              <div className=\"space-y-2\">\n                {transactions\n                  .filter(t => t.payerId === selectedPayer.id)\n                  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n                  .slice(0, 10)\n                  .map((transaction) => (\n                    <div \n                      key={transaction.id}\n                      className=\"flex items-center justify-between p-3 border border-border rounded-md\"\n                      data-testid={`transaction-${transaction.id}`}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                          transaction.type === \"deposit\" \n                            ? \"bg-green-500/10 text-green-500\" \n                            : \"bg-red-500/10 text-red-500\"\n                        }`}>\n                          {transaction.type === \"deposit\" ? \"+\" : \"-\"}\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium\">\n                            {transaction.type === \"deposit\" ? \"Пополнение\" : \"Списание\"}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {new Date(transaction.date).toLocaleString('ru-RU')}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className={`font-semibold ${\n                          transaction.type === \"deposit\" \n                            ? \"text-green-500\" \n                            : \"text-red-500\"\n                        }`}>\n                          {transaction.type === \"deposit\" ? \"+\" : \"-\"}\n                          {formatCurrency(transaction.amount)}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {transaction.comment}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                {transactions.filter(t => t.payerId === selectedPayer.id).length === 0 && (\n                  <p className=\"text-center text-muted-foreground py-8\">\n                    Нет транзакций\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14539},"client/src/components/WithdrawDialog.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { CreditCard, Building2, User } from \"lucide-react\";\nimport { type Payer, PAYMENT_METHODS } from \"@/lib/payersData\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface WithdrawDialogProps {\n  payers: Payer[];\n  onWithdraw: (payerId: string, amount: number, method: string) => void;\n}\n\nexport default function WithdrawDialog({ payers, onWithdraw }: WithdrawDialogProps) {\n  const [open, setOpen] = useState(false);\n  const [selectedPayer, setSelectedPayer] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState(\"card\");\n  const { toast } = useToast();\n\n  const quickAmounts = [500, 1000, 2000, 5000, 10000];\n\n  const handleWithdraw = () => {\n    const amountNum = parseFloat(amount);\n    \n    if (!selectedPayer) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Выберите плательщика\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!amountNum || amountNum <= 0) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Введите корректную сумму\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const payer = payers.find(p => p.id === selectedPayer);\n    if (payer && payer.balance < amountNum) {\n      toast({\n        title: \"Недостаточно средств\",\n        description: `На балансе ${payer.balance} ₽, а требуется ${amountNum} ₽`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const method = PAYMENT_METHODS.find(m => m.id === paymentMethod);\n    onWithdraw(selectedPayer, amountNum, method?.name || paymentMethod);\n    \n    toast({\n      title: \"Средства списаны\",\n      description: `Успешно списано ${amountNum} ₽`,\n    });\n\n    setOpen(false);\n    setAmount(\"\");\n    setSelectedPayer(\"\");\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"default\" className=\"gap-2 bg-orange-600 hover:bg-orange-700\" data-testid=\"button-withdraw\">\n          <CreditCard className=\"h-4 w-4\" />\n          Списать со счета\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>Списать со счета</DialogTitle>\n          <DialogDescription>\n            Выберите плательщика и сумму для списания\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\">\n          <div className=\"space-y-3\">\n            <Label>Плательщики</Label>\n            <div className=\"space-y-2\">\n              {payers.map((payer) => (\n                <Card\n                  key={payer.id}\n                  className={`p-4 cursor-pointer hover-elevate transition-all ${\n                    selectedPayer === payer.id ? \"ring-2 ring-primary\" : \"\"\n                  }`}\n                  onClick={() => setSelectedPayer(payer.id)}\n                  data-testid={`select-withdraw-payer-${payer.id}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 rounded-md bg-primary/10 flex items-center justify-center\">\n                      {payer.type === \"company\" ? (\n                        <Building2 className=\"h-5 w-5 text-primary\" />\n                      ) : (\n                        <User className=\"h-5 w-5 text-primary\" />\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\">{payer.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Тип: {payer.type === \"company\" ? \"company\" : \"individual\"}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-muted-foreground\">Баланс:</p>\n                      <p className=\"font-semibold\">\n                        {payer.balance.toLocaleString('ru-RU')} ₽\n                      </p>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"withdraw-amount\">Списать со счета *</Label>\n            <Input\n              id=\"withdraw-amount\"\n              type=\"number\"\n              placeholder=\"2000\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n              data-testid=\"input-withdraw-amount\"\n            />\n            <div className=\"flex gap-2 flex-wrap mt-2\">\n              {quickAmounts.map((qa) => (\n                <Button\n                  key={qa}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setAmount(qa.toString())}\n                  data-testid={`button-withdraw-quick-${qa}`}\n                >\n                  {qa} ₽\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Выберите способ оплаты</Label>\n            <RadioGroup value={paymentMethod} onValueChange={setPaymentMethod}>\n              {PAYMENT_METHODS.map((method) => (\n                <div \n                  key={method.id}\n                  className=\"flex items-center space-x-2 p-3 border border-border rounded-md hover-elevate cursor-pointer\"\n                  onClick={() => setPaymentMethod(method.id)}\n                >\n                  <RadioGroupItem value={method.id} id={`withdraw-${method.id}`} />\n                  <Label htmlFor={`withdraw-${method.id}`} className=\"flex items-center gap-3 cursor-pointer flex-1\">\n                    <span className=\"text-2xl\">{method.icon}</span>\n                    <div>\n                      <p className=\"font-medium\">{method.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{method.description}</p>\n                    </div>\n                  </Label>\n                </div>\n              ))}\n            </RadioGroup>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-2\">\n          <Button variant=\"outline\" onClick={() => setOpen(false)}>\n            Отмена\n          </Button>\n          <Button onClick={handleWithdraw} className=\"bg-orange-600 hover:bg-orange-700\" data-testid=\"button-confirm-withdraw\">\n            Списать\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7064}},"version":2}