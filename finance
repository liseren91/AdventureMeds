import React, { useState } from 'react';
import { Plus, Building2, User, CreditCard, Wallet, ChevronRight, AlertCircle, CheckCircle } from 'lucide-react';

export default function FinanceDashboard() {
  const [payers, setPayers] = useState([
    {
      type: 'company',
      name: 'ООО "Ай Хант"',
      typeLabel: 'Тип: company',
      balance: 150000,
      service: 'ChatGPT Team, Claude Pro, Midjourney Business',
      services: [
        { name: 'ChatGPT Team', price: 25000, status: 'Активен', paymentMethod: 'Корпоративная карта VISA •• 8899' },
        { name: 'Claude Pro', price: 18000, status: 'Активен', paymentMethod: 'Р/счёт 40702...' },
        { name: 'Midjourney Business', price: 45000, status: 'Активен', paymentMethod: 'Корпоративная карта VISA •• 8899' }
      ],
      paymentMethods: [
        {
          name: 'Корпоративная карта VISA •• 8899',
          description: 'ЮKassa — corporate card',
          status: 'по умолчанию',
          isDefault: true
        },
        {
          name: 'Р/счёт 40702...',
          description: 'Bank — bank account',
          status: 'Сделать основным',
          isDefault: false
        }
      ]
    },
    {
      type: 'individual',
      name: 'Иван Иванов',
      typeLabel: 'Тип: individual',
      balance: 1200,
      service: 'ChatGPT Plus',
      services: [
        { name: 'ChatGPT Plus', price: 1500, status: 'Активен', paymentMethod: 'VISA •• 4242' }
      ],
      paymentMethods: [
        {
          name: 'VISA •• 4242',
          description: 'ЮKassa — personal card',
          status: 'по умолчанию',
          isDefault: true
        }
      ]
    }
  ]);

  const [selectedPayer, setSelectedPayer] = useState(0);

  const calculateMonthlyTotal = (services) => {
    return services.reduce((sum, service) => sum + service.price, 0);
  };

  const checkBalance = (payerIndex) => {
    const payer = payers[payerIndex];
    const monthlyTotal = calculateMonthlyTotal(payer.services);
    return {
      hasEnough: payer.balance >= monthlyTotal,
      monthlyTotal,
      difference: payer.balance - monthlyTotal
    };
  };

  const handleTopUp = () => {
    const amount = prompt('Введите сумму пополнения (RUB):');
    if (amount && !isNaN(amount) && parseInt(amount) > 0) {
      setPayers(prev => {
        const updated = [...prev];
        updated[selectedPayer].balance += parseInt(amount);
        return updated;
      });
      alert(`Баланс пополнен на ${parseInt(amount).toLocaleString()} RUB`);
    }
  };

  const handleWithdraw = () => {
    const payer = payers[selectedPayer];
    const amount = prompt('Введите сумму списания (RUB):');
    if (amount && !isNaN(amount) && parseInt(amount) > 0) {
      if (parseInt(amount) <= payer.balance) {
        setPayers(prev => {
          const updated = [...prev];
          updated[selectedPayer].balance -= parseInt(amount);
          return updated;
        });
        alert(`Списано ${parseInt(amount).toLocaleString()} RUB`);
      } else {
        alert('Недостаточно средств на балансе');
      }
    }
  };

  const handleMakeDefault = (methodIndex) => {
    setPayers(prev => {
      const updated = [...prev];
      updated[selectedPayer].paymentMethods = updated[selectedPayer].paymentMethods.map((method, idx) => ({
        ...method,
        isDefault: idx === methodIndex,
        status: idx === methodIndex ? 'по умолчанию' : 'Сделать основным'
      }));
      return updated;
    });
    alert('Способ оплаты установлен как основной');
  };

  const currentPayer = payers[selectedPayer];
  const balanceCheck = checkBalance(selectedPayer);

  const transactions = [
    {
      date: '02.10.2025, 16:11:49',
      type: 'Пополнение',
      amount: '+100 000 RUB',
      comment: 'Стартовый депозит',
      isPositive: true
    },
    {
      date: '02.10.2025, 16:11:49',
      type: 'Списание',
      amount: '-5 000 RUB',
      comment: 'Оплата ChatGPT Plus',
      isPositive: false
    }
  ];

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-2xl font-bold text-gray-900">Финансы — AI Hunt</h1>
          <div className="flex gap-3">
            <button 
              onClick={() => alert('Функция добавления плательщика')}
              className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
            >
              <Plus size={18} />
              Добавить плательщика
            </button>
            <button 
              onClick={handleTopUp}
              className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition"
            >
              <Wallet size={18} />
              Пополнить баланс
            </button>
            <button 
              onClick={handleWithdraw}
              className="flex items-center gap-2 px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition"
            >
              <CreditCard size={18} />
              Списать со счета
            </button>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm p-6 mb-6">
          <h2 className="text-lg font-semibold mb-4">Плательщики</h2>
          <div className="grid grid-cols-2 gap-4">
            {payers.map((payer, index) => {
              const check = checkBalance(index);
              return (
                <div 
                  key={index} 
                  onClick={() => setSelectedPayer(index)}
                  className={`border-2 rounded-lg p-4 cursor-pointer transition ${
                    selectedPayer === index ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:border-blue-300'
                  }`}
                >
                  <div className="flex items-start gap-3 mb-3">
                    {payer.type === 'company' ? (
                      <Building2 className="text-gray-600 mt-1" size={20} />
                    ) : (
                      <User className="text-gray-600 mt-1" size={20} />
                    )}
                    <div className="flex-1">
                      <h3 className="font-semibold text-gray-900">{payer.name}</h3>
                      <p className="text-sm text-gray-500">{payer.typeLabel}</p>
                    </div>
                    {selectedPayer === index && (
                      <ChevronRight className="text-blue-600" size={20} />
                    )}
                  </div>
                  <div className="space-y-2">
                    <p className="text-sm">
                      <span className="text-gray-600">Баланс:</span>{' '}
                      <span className="font-medium">{payer.balance.toLocaleString()} RUB</span>
                    </p>
                    <p className="text-sm text-gray-600">Сервисы: {payer.service}</p>
                    <div className={`flex items-center gap-2 text-xs mt-2 p-2 rounded ${
                      check.hasEnough ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'
                    }`}>
                      {check.hasEnough ? (
                        <>
                          <CheckCircle size={14} />
                          <span>Достаточно средств (+{check.difference.toLocaleString()} RUB)</span>
                        </>
                      ) : (
                        <>
                          <AlertCircle size={14} />
                          <span>Недостаточно средств ({check.difference.toLocaleString()} RUB)</span>
                        </>
                      )}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm p-6 mb-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-semibold">Сервисы плательщика: {currentPayer.name}</h2>
            <button 
              onClick={() => alert('Функция добавления сервиса')}
              className="text-blue-600 hover:text-blue-700 text-sm font-medium flex items-center gap-1"
            >
              <Plus size={16} />
              Добавить сервис
            </button>
          </div>
          <div className={`flex items-start gap-2 mb-4 p-3 rounded-lg ${
            balanceCheck.hasEnough ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'
          }`}>
            {balanceCheck.hasEnough ? (
              <CheckCircle className="text-green-600 mt-0.5" size={18} />
            ) : (
              <AlertCircle className="text-red-600 mt-0.5" size={18} />
            )}
            <div className="flex-1">
              <p className={`text-sm font-medium ${balanceCheck.hasEnough ? 'text-green-800' : 'text-red-800'}`}>
                {balanceCheck.hasEnough 
                  ? 'На балансе достаточно средств для оплаты всех подписок'
                  : 'Внимание! Недостаточно средств для оплаты всех подписок'}
              </p>
              <p className={`text-xs mt-1 ${balanceCheck.hasEnough ? 'text-green-600' : 'text-red-600'}`}>
                Ежемесячная стоимость: {balanceCheck.monthlyTotal.toLocaleString()} RUB | 
                Текущий баланс: {currentPayer.balance.toLocaleString()} RUB | 
                {balanceCheck.hasEnough ? ' Остаток: ' : ' Не хватает: '}
                {Math.abs(balanceCheck.difference).toLocaleString()} RUB
              </p>
            </div>
          </div>
          <p className="text-xs text-gray-500 mb-4">
            {currentPayer.type === 'company' 
              ? 'Оплата производится с корпоративной карты или по счету' 
              : 'Оплата производится с привязанной карты'}
          </p>
          <div className="space-y-3">
            {currentPayer.services.map((service, index) => (
              <div key={index} className="flex justify-between items-center p-4 border border-gray-200 rounded-lg hover:border-blue-300 transition">
                <div className="flex-1">
                  <p className="font-medium text-gray-900">{service.name}</p>
                  <p className="text-sm text-gray-500">{service.paymentMethod}</p>
                </div>
                <div className="text-right">
                  <p className="font-medium text-gray-900">{service.price.toLocaleString()} RUB/мес</p>
                  <span className="inline-block px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full mt-1">
                    {service.status}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="grid grid-cols-3 gap-6 mb-6">
          <div className="col-span-2 bg-white rounded-xl shadow-sm p-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-semibold">Способы оплаты: {currentPayer.name}</h2>
              <button 
                onClick={() => alert('Функция добавления способа оплаты')}
                className="text-blue-600 hover:text-blue-700 text-sm font-medium"
              >
                + Добавить способ
              </button>
            </div>
            <div className="space-y-3">
              {currentPayer.paymentMethods.map((method, index) => (
                <div key={index} className="flex justify-between items-center p-4 border border-gray-200 rounded-lg hover:border-blue-300 transition">
                  <div>
                    <p className="font-medium text-gray-900">{method.name}</p>
                    <p className="text-sm text-gray-500">{method.description}</p>
                  </div>
                  {method.isDefault ? (
                    <span className="px-3 py-1 bg-green-100 text-green-700 text-sm rounded-full">
                      {method.status}
                    </span>
                  ) : (
                    <button 
                      onClick={() => handleMakeDefault(index)}
                      className="text-blue-600 hover:text-blue-700 text-sm font-medium"
                    >
                      {method.status}
                    </button>
                  )}
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm p-6">
            <h2 className="text-lg font-semibold mb-4">Баланс</h2>
            <div className="mb-4">
              <p className="text-sm text-gray-600 mb-1">Текущий баланс:</p>
              <p className={`text-2xl font-bold ${balanceCheck.hasEnough ? 'text-gray-900' : 'text-red-600'}`}>
                {currentPayer.balance.toLocaleString()} RUB
              </p>
              <p className="text-xs text-gray-500 mt-1">≈ {currentPayer.balance.toLocaleString()} ₽ по текущему курсу</p>
              <div className="mt-3 pt-3 border-t border-gray-200">
                <p className="text-xs text-gray-600">Ежемесячные расходы:</p>
                <p className="text-sm font-semibold text-gray-900">{balanceCheck.monthlyTotal.toLocaleString()} RUB</p>
              </div>
            </div>
            <div className="space-y-2">
              <button 
                onClick={handleTopUp}
                className="w-full flex items-center justify-center gap-2 px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition font-medium"
              >
                <Wallet size={18} />
                Пополнить
              </button>
              <button 
                onClick={handleWithdraw}
                className="w-full flex items-center justify-center gap-2 px-4 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition font-medium"
              >
                <CreditCard size={18} />
                Списать
              </button>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm p-6">
          <h2 className="text-lg font-semibold mb-4">Транзакции</h2>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-200">
                  <th className="text-left py-3 px-4 text-sm font-medium text-gray-600">ДАТА</th>
                  <th className="text-left py-3 px-4 text-sm font-medium text-gray-600">ТИП</th>
                  <th className="text-left py-3 px-4 text-sm font-medium text-gray-600">СУММА</th>
                  <th className="text-left py-3 px-4 text-sm font-medium text-gray-600">КОММЕНТАРИЙ</th>
                </tr>
              </thead>
              <tbody>
                {transactions.map((transaction, index) => (
                  <tr 
                    key={index} 
                    onClick={() => alert(`Детали транзакции: ${transaction.comment}`)}
                    className="border-b border-gray-100 hover:bg-gray-50 cursor-pointer"
                  >
                    <td className="py-3 px-4 text-sm text-gray-900">{transaction.date}</td>
                    <td className="py-3 px-4 text-sm text-gray-900">{transaction.type}</td>
                    <td className={`py-3 px-4 text-sm font-medium ${transaction.isPositive ? 'text-green-600' : 'text-red-600'}`}>
                      {transaction.amount}
                    </td>
                    <td className="py-3 px-4 text-sm text-gray-600">{transaction.comment}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {currentPayer.type === 'company' && (
          <div className="bg-white rounded-xl shadow-sm p-6 mt-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-semibold">Документы</h2>
              <select className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option>Месяц</option>
                <option>Квартал</option>
                <option>Год</option>
                <option>Всё время</option>
              </select>
            </div>

            <div className="mb-4">
              <div className="flex gap-2 border-b border-gray-200">
                <button className="px-4 py-2 text-sm font-medium text-blue-600 border-b-2 border-blue-600">
                  Счета
                </button>
                <button className="px-4 py-2 text-sm font-medium text-gray-600 hover:text-gray-900">
                  Отчётные документы
                </button>
                <button className="px-4 py-2 text-sm font-medium text-gray-600 hover:text-gray-900">
                  Акты сверки
                </button>
                <button className="px-4 py-2 text-sm font-medium text-gray-600 hover:text-gray-900">
                  Договоры
                </button>
              </div>
            </div>

            <div className="mb-4">
              <select className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option>Статус счёта</option>
                <option>Оплачен</option>
                <option>Не оплачен</option>
              </select>
            </div>

            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b border-gray-200 bg-gray-50">
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-600">Счёт</th>
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-600">Статус оплаты</th>
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-600">Сумма счёта</th>
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-600">Выставлен</th>
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-600">Сумма платежа</th>
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-600">Оплачен</th>
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-600">Зачислен</th>
                    <th className="text-right py-3 px-4 text-sm font-medium text-gray-600">Действия</th>
                  </tr>
                </thead>
                <tbody>
                  <tr className="border-b border-gray-100 hover:bg-gray-50">
                    <td className="py-3 px-4 text-sm text-gray-900">1228579/2</td>
                    <td className="py-3 px-4 text-sm">
                      <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded">не оплачен</span>
                    </td>
                    <td className="py-3 px-4 text-sm text-gray-900">2 000,00 ₽</td>
                    <td className="py-3 px-4 text-sm text-gray-600">3 октября, 2025</td>
                    <td className="py-3 px-4 text-sm text-gray-600">-</td>
                    <td className="py-3 px-4 text-sm text-gray-600">-</td>
                    <td className="py-3 px-4 text-sm text-gray-600">-</td>
                    <td className="py-3 px-4 text-sm text-right">
                      <div className="flex justify-end gap-2">
                        <button 
                          onClick={(e) => {
                            e.stopPropagation();
                            alert('Скачать счёт');
                          }}
                          className="p-1 hover:bg-gray-100 rounded"
                          title="Скачать"
                        >
                          <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                          </svg>
                        </button>
                        <button 
                          onClick={(e) => {
                            e.stopPropagation();
                            alert('Отправить по email');
                          }}
                          className="p-1 hover:bg-gray-100 rounded"
                          title="Отправить"
                        >
                          <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                          </svg>
                        </button>
                        <button 
                          onClick={(e) => {
                            e.stopPropagation();
                            alert('Копировать');
                          }}
                          className="p-1 hover:bg-gray-100 rounded"
                          title="Копировать"
                        >
                          <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                          </svg>
                        </button>
                        <button 
                          onClick={(e) => {
                            e.stopPropagation();
                            alert('Удалить счёт');
                          }}
                          className="p-1 hover:bg-gray-100 rounded"
                          title="Удалить"
                        >
                          <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                          </svg>
                        </button>
                      </div>
                    </td>
                  </tr>
                  <tr className="bg-gray-50">
                    <td className="py-3 px-4 text-sm font-medium text-gray-900">Итого:</td>
                    <td className="py-3 px-4"></td>
                    <td className="py-3 px-4 text-sm font-semibold text-gray-900">2 000,00 ₽</td>
                    <td className="py-3 px-4"></td>
                    <td className="py-3 px-4 text-sm font-semibold text-gray-900">0,00 ₽</td>
                    <td className="py-3 px-4"></td>
                    <td className="py-3 px-4"></td>
                    <td className="py-3 px-4"></td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}